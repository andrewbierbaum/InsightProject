,body,date
0,"Just a heads up, Visual Studio Team Services has hosted macOS build agents for exactly that, so if you're developing the app with Xamarin you could totally use that for your iOS builds.",2018-05-23 09:15:00
1,"Good luck.

We got a Mac Mini at my work to ultimately set up as a headless iOS build agent for Xamarin. Still haven't been able to get that working, and XCode is horrible.",2018-05-23 09:49:30
2,"Not sure, for some reason when I try deploying the Xamarin agent from VS on my PC it just fails to find the machine. I can connect fine with anything else (though desktop sharing with VNC and the like is laggy as hell). We've moved on to focusing on an Android app for the time being, but will come back to iOS later.",2018-05-23 10:01:11
3,"The way I have my project setuped, I have a common librairy with all my game code which is build to different target (netcore, netframework, xamarin) and I have small launcher projects for each specific platform so I don't really want specific code to bleed out of those.

I guess the api is different for android/ios (is there even such an api for windows/linux/macos?), I could abstract it to an interface injected into my game code (I'm already doing that for resource loading) but no point for now.",2018-05-23 14:08:29
4,"Instead of introducing you to a new language (which can also be a good factor, to add to your versatility), I'll encourage you to continue on your C# path. C# is still a good language tho, I use C# in web development and mobile dev (Xamarin).

I have my lead to teach me the good practices in programming. Aside from that puro self study lang ng MVC, MVVM (for mobile dev), and stackoverflow stuff.",2018-05-23 15:10:09
5,"Is it just me, or does every Visual Studio update break Xamarin in some way? I have to do the ""Build: fail, rebuild: fail, restart vs: fail, build: fail, rebuild: success"" dance every time there's a VS update.

This time around it was ""CssG is not a valid target"".",2018-05-23 18:30:32
6,"Room is extremely well ventilated.  
  
C# mainly, back-end and architecture. Working on a budgeting app right now on Xamarin MVC/ASP.NET Core backend",2018-05-23 18:35:11
7,"Awesome! I've been looking for a reason to dive a little deeper into Xamarin . 

Sounds like fun, good luck! ",2018-05-23 18:36:10
8,"you can build an IOS app using C# by Xamarin, or study ios development ",2018-05-23 19:54:44
9,To be fair if the wind blows the wrong way Xamarin breaks. Usually fixes itself with a clean or a hard delete of bin and obj folders. ,2018-05-23 21:11:30
10,"I moved to VS Preview, installed VS Intellicode extension, and for the first time in ages Xamarin was happy. Resharper seems to hate Xamarin at the moment SO its been disabled. ",2018-05-23 21:17:52
11,I found a good solution [here](https://www.wintellect.com/linking-property-change-notifications-in-xamarin-forms-or-wpfsilverlight/).,2018-05-24 00:17:34
12,"C# isn't platform-bound. It's also what's used for Unity, Xamarin and UWP - can't do that with PowerShell.

C# is very nice for tools that you give to your end users and colleagues as it's easier to build GUIs with and natively produces an .exe",2018-05-24 07:37:57
13,"It is amazing the amount of hatred there. Some complain they just want Native API access? But this is already possible with xamarin... oO

",2018-05-24 12:00:11
14,"I know, shame on me. I'm learning Xamarin to create a cross platform edition. ",2018-05-24 12:52:45
15,"What kind of programmer are you?

If you have C# then you can do Xamarin. Other ways of making apps (JavaScript, Java, Swift) need different languages or skillsets. Beware that Xamarin is not very heavily respected in the industry (no link handy but developer survey indicates Xamarin is ""nightmare"" will try to find it tonight) and depending on location it's very hard to find a job for a simple reason C# is backend and corporate most ""mobile"" jobs are startup-like and non-corporate so you will see ten React Native jobs before 1 Xamarin job (that is probably held by a very very senior .NET developer). Also learning C# is not .NET and it's a huge mountain... better to learn React Native if you have any inclination for a job (again, check your local shops maybe everything is done in Xamarin where you are but chances are not).",2018-05-24 13:04:17
16,"Depending on technology it takes a very high degree of skill to make a cross platform application it's usually 100x ""easier"" with 10x less effort to silo and make for one platform... Lowest ""skill"" and highest bang for buck if you know C# is probably Xamarin followed by React Native (which is also cross platform)

Other alternates exist like Ionic, putting a responsive web application into a webview like Cordova etc., Each at lower levels of abstraction... I would say Xamarin is the highest level so for a personal project great but for a job go React Native or some hot JavaScript framework ",2018-05-24 13:53:43
17,"Then use Xamarin forms and avoid writing any C# at all and use XAML or use some app builder software (but then it's hard to extend or customize later) 

If you are working for yourself time is money so use the highest level of abstraction you can and still get away with it... Your friend is right Xamarin is a good choice for you, use Xamarin Forms",2018-05-24 16:13:42
18,What are the advantages/disadvantages of Xamarin and React Native?,2018-05-24 17:06:24
19,"We just built a bluetooth app using Xamarin.Forms. Xamarin gives you access to the native APIs of Android and iOS, so you can just use the native bluetooth APIs of both systems. Create an interface and implement it once for each platform.. the rest of the code is shared. There's also a [Bluetooth LE](https://github.com/xamarin/XamarinComponents) component for Xamarin that should keep you from touching any native APIs - we haven't tried that though.",2018-05-24 18:58:08
20,Not quite the same thing but I'm sure Microsoft would point you to Xamarin.,2018-05-25 05:07:45
21,"Good point. I'll add those clients to the project. I'm confident Mac and Windows, not too sure how Linux works because Xamarin Forms supposedly has Linux support, but how does on  build for Linux without Rider. Does rider even support Xamarin Forms.",2018-05-25 05:37:32
22,"I doubt a small a console app would be much of a problem with either. But if you did something with that small of scale, it would probably be quicker to use notepad\+\+ or something to edit the code and do builds from the command line. The IDE is a bit heavy for the Win 1, but I'm gonna do a build of a Xamarin project on the Win 2 this weekend, and I can let you know how it goes.",2018-05-25 05:39:56
23,"> WPF

Is Xamarin.WPF a thing at the moment? I know it's planned, but didn't know it was ready yet?",2018-05-28 12:44:59
24,Its also possible to use Xamarin to write an Android/iOS cross-platform app.  Xamarin uses C#.,2018-05-28 17:46:00
25,Cool. What's the experience like? How does it compare to Xamarin.Android or Xamarin.Mac?,2018-05-28 19:11:21
26,"You need to have the local files in the iOS project and use the iOS webview.

See here: https://stackoverflow.com/questions/42078911/load-local-css-file-into-xamarin-ios-webview?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

and here: https://github.com/xamarin/recipes/tree/master/Recipes/ios/content_controls/web_view/load_local_content",2018-05-28 21:10:07
27,"a really good example for xamarin forms that uses a cross platform webview. 

https://github.com/xamarin/xamarin-forms-samples/tree/master/CustomRenderers/HybridWebView

down in the HybridWebViewRenderer for each you'll find an example of loading local resources.

you'll end up putting the content in each project, both the droid and ios project. if you are on windows, you can use ""add a link"" to keep them in one location to avoid duplication. 

",2018-05-28 23:20:03
28,"Respectful disagreement on the internet? How dare you! :-D

I guess it's just a difference in philosophy and I'm at the pragmatic end of the spectrum. Devs are not perfect and publishing a fix to Apple can take days. Regardless, I think hard crashes are generally bad for the user experience. Especially for the many types of C# exceptions that don't need to be fatal. Things like out of memory and stack overflow, invalid pointers and other native problems are going to hard crash because there is no recovery. Oh, and on Xamarin.Android there's even a class of native crash that can't even be tracked by HockeyApp! But I digress, this is a conversation about the experience the user should have when there is an unexpected exception thrown by the app. For a simple app, just crashing out might be fine. For a more complicated app, where the user has a non-trivial amount of intermediate state, a hard crash could be quite frustrating for the user.",2018-05-28 23:43:53
29,"Sparsely. TBH the best experience was on Xamarin.Android, [using this library](https://github.com/xabre/xamarin-bluetooth-le), which is while far from the optimal one I described, at least is not stuck with callback hell, and has a pretty well written API.",2018-05-29 01:02:26
30,"Yeah, by adding its own callback hell via subscriptions. RxAndroid can be nice, but let's be honest, it has a steeper learning curve than Android AND Kotlin AND Xamarin.Android together. It's mainly for the die-hard Rx fans, and I would never recommend a developer without experience with Rx to use one of their libraries.",2018-05-29 01:05:49
31,"I could be wrong, but I think you'll find that as far as percentages go, these days most .NET code is LOB apps and/or server-side of a web application. I wonder if you'll see different ratios for Xamarin-specific development.

I know you'd see more i18n for client-side web applications.",2018-05-29 12:29:59
32,"That is a very good point about the LOB apps.  That would be dominant and I wish I could edit the title to include 'outward\-facing'.  

I see large upticks in my outward\-facing apps when I localize and wanted to see why others doing the same aren't localizing.  

Xamarin and web apps are clearly outward\-facing \- good point!",2018-05-29 12:32:54
33,"https://docs.microsoft.com/en-us/xamarin/tools/ios-simulator for the ios, although you will need a mac to build on for instance. Depends on xamarin deployment.

Any apple with xcode can be an emulator. ",2018-05-29 13:38:54
34,"Pues deep learning se ha puesto de moda gracias a los hitos de Watson de IBM y DeepMind de Google; nos han mostrado que tienen potencial y que son el futuro.

Creo que **si** tiene chances de volverse un skill util a corto plazo por que que sus aplicaciones ya son comerciales. Abandon ya un poco los laboratorios y vamos a necesitar muchos developers para poder explotar esta idea en todo el curso de la proxima decada. 

*Xamarin* ya es un skill de utilidad, la multiplataforma no es el futuro sino el presente.",2018-05-29 14:06:26
35,What about Xamarin? Doesn't it get compiled to native code and then you still get to maintain a single code base for the most part?,2018-05-29 19:34:46
36,"It does, however Xamarin still has to wait for native updates first, then release its own version of things for it work. If there are certain things I want to try, I end up just using the native tools for beta stuff anyway.

Having experience with Xamarin, it works fine, but apps become bloated from the .NET libraries, the design tools are not\-at\-all as good as native, and most documentation is converting native code to C# \(i.e. Xamarin documentation isn't the best on its own\).",2018-05-29 19:46:34
37,"Yeah, all my research so far has been pointing this way. 

Don't suppose something like Cordova or Xamarin would do the trick?",2018-05-29 21:09:06
38,"Cordova: nope

Xamarin allows you to access every api just like you would in Kotlin/Swift. The only advantage is that you use C# for both but you'll still have to write two apps.",2018-05-29 21:12:48
39,"Mobile dev here. We've seen things come and go \(remember when PhoneGap came out and was heralded as the best thing since sliced bread?\) but native is still dominating the market. Xamarin and React Native have their places, primarily for low budget MVPs or small companies. If you want performance, you go native. If you want the flashy UI/animations, you still go native. There are very few ""top"" apps that are written in react native or xamarin.

Also note that Pinterest, Uber, LinkedIn, and Lyft recently invested heavily into rewriting their apps. They all chose to rewrite it natively, not React Native.",2018-05-29 21:21:14
40,"1. The original Visual Basic died when VB.NET came out because the replacement was not an evolution of VB but a completely different language that was designed for a completely different ecosystem. When it first came out it was essentially C# but with a different syntax. To make matters more confusing VB.NET is nowadays called Visual Basic. So, when you say that you love Visual Basic do you mean Visual Basic or do you mean Visual Basic? (There's also VBScript and VBA but I won't go there.)

2. Visual Basic is treated like the red headed stepchild of the Microsoft dev ecosystem. It's not fully supported by .NET Core, Xamarin, Unity, etc. By learning Visual Basic instead of C# you're limiting yourself for no good reason.",2018-05-29 21:32:17
41,I just started coding with Xamarin and I actually get this! Thanks for the laugh,2018-05-30 00:06:53
42,"Software dev here, are you planning on making this cross platform with Xamarin or something? Just curious",2018-06-02 05:27:50
43,"If you have the native Android and iOS libraries, you can create Binding Projects in order to use them in any Xamarin application.

iOS Binding \- [https://docs.microsoft.com/en\-us/xamarin/ios/platform/binding\-objective\-c/](https://docs.microsoft.com/en-us/xamarin/ios/platform/binding-objective-c/)

Android Binding \- [https://docs.microsoft.com/en\-us/xamarin/android/platform/binding\-java\-library/](https://docs.microsoft.com/en-us/xamarin/android/platform/binding-java-library/)",2018-06-02 06:35:39
44,"Thanks for the info, I'm going to take a closer look, I misunderstood the whole process at first, but I thought bindings would require me to do bindings in Java for the C wrapper and then bindings in C# for the Java library, am I right? The way I'm currently doing it is by P/Invoke-ing the methods in the C wrapper and adding the .so library the the Xamarin project. The only problem is that I have to build the library from Android Studio.",2018-06-02 07:06:03
45,"Why is this even a question? Are we about to compare Xamarin development to Swift? How about React Native and Java?

As for my opinion on Flutter, I've been hired in the past to rewrite both Xamarin and React Native projects into native projects. Projects like Flutter are fun for the developers working on them, but they're an absolute nightmare to maintain in the real world. It's not making things easier, it's making development... different. 

Everyone who considers Flutter or Xamarin a serious option to develop an app, will see me walk out the door. Luckily our job market allows me to have this attitude, and luckily I've never met anyone who thought so.",2018-06-02 09:37:00
46,"Fuck Cordova, use xamarin or react native. ",2018-06-02 12:19:50
47,"I work with android which is why I bring it up. It's a really nice language but you're right that it's not really necessary especially with the huge push on cross platform lately. Things like Cordova, React Native and Xamarin are getting really great support",2018-06-02 15:04:04
48,"Xamarin Question.

I have a take home project for an interview that needs to be written in Xamarin.android. I have not received it yet but apparently this team does not use .forms.

I have limited Xamarin or even C# experience but I have done a tutorial for Xamarin.forms on udemy.

My question is, are they similar enough beyond the fact that each UI has to be made/handled separately in native that the tutorial will still be applicable?

",2018-06-02 15:13:07
49,"I'm not familiar with Xamarin, but typically the way I'd handle this is factoring out the common code as a dependency (e.g. as a library).

If the projects are very closely related, you could even store them in the same repo, with the common code in a separate folder.",2018-06-02 17:53:28
50,Ya just look at what they did with xamarin....oh wait..,2018-06-02 19:36:47
51,"Ironic with Microsoft pusing cross\-platform development so hard. That is, with a unified codebase \(Xamarin\)...

Apparently it is not working out to a level that it is hassle free, after all.",2018-06-02 20:44:03
52,"Dude.. ease of. Cordova has it's place. If you want to use the same code for web, iOS and android I'd say Cordova is an excellent choice. If you're okay with tweaking your application to act the same one multiple devices - and maybe have a separate web app - then go for react native, Xamarin or native script. Just know that's it more work and more testing than serving the same application to multiple devices.",2018-06-02 20:51:46
53,"Thanks, I was able to add the native library to both targets (iOS and Android) in the Xamarin Forms solution. The Xcode project is easy to setup since one can have a project that only builds the native library, for Android Studio I'm still figure out a way to generate the shared library as the output instead of the .APK or .AAR package. Once I get both native projects (Xcode and Android Studio) generating the native library for each platform, I'll try to build the libraries from Visual Studio with a task.",2018-06-02 23:26:22
54,It is a rebranded Xamarin Studio,2018-06-03 03:08:00
55,"It's pretty ridiculous that management are pressuring you to adopt a tool with such awful support. The Xamarin dev tools are actually suited for professional use and make it much easier to debug, profile and test your app.",2018-06-03 04:19:46
56,"But as far as I know different frameworks (iOS, Android, xamarin) no one gives you something to build beautiful apps out of the box, you need to work with the designers to generate sledging amazing",2018-06-03 06:28:25
57,"I don't think anyone here has mentioned Xamarin. To my knowledge, after Xamarin was bought by Microsoft, a lot of their tools became free. I'd also like to point out that Microsoft already offer free private repos with Visual Studio Team Services. I don't believe you can make your repos public however.

Microsoft do have a few open source projects on GitHub, such as .NET Core, and Visual Studio Code. Iirc, Visual Studio has some nice GitHub integration. It makes sense that they may want to buy it out, especially considering that GitHub is to my knowledge the largest site for open source projects.

The points I'm making is that it might not be a bad thing, and it makes sense. Have an average day!",2018-06-03 10:06:34
58,"Xamarin bought robovm not MS. 

But its easy to blame M$ though amirite?",2018-06-03 10:37:38
59,"No brainer here... quit.  The mobile job market for someone with skills is red hot.  You'll have to do Swift most likely \(assuming you don't already know Swift\).  Also, this assumes you're in a city that has a lot of iOS jobs.

One a related note: a local company was moving from Swift to Xamarin and after a few months dumped all of it and hired all new devs.

Point: when a company moves over to a new language, that doesn't mean they'll find the skilled devs they need.  More so if the area is pretty hot for iOS devs.",2018-06-03 11:31:31
60,"> I don't think anyone here has mentioned Xamarin. To my knowledge, after Xamarin was bought by Microsoft, a lot of their tools became free. I'd also like to point out that Microsoft already offer free private repos with Visual Studio Team Services. I don't believe you can make your repos public however.

Github is already free for individuals, I have nothing to gain.

> Microsoft do have a few open source projects on GitHub, such as .NET Core, and Visual Studio Code. Iirc, Visual Studio has some nice GitHub integration. It makes sense that they may want to buy it out, especially considering that GitHub is to my knowledge the largest site for open source projects.

Like Microsoft, I too have projects on GitHub.  Like Microsoft, I too would be terrible at running/managing GitHub.

Microsoft wants to own GitHub to collect valuable information on developers.  Period.",2018-06-03 12:17:17
61,"It depends how far you want to look back but we can go as far as PowerPoint (Forethought), through Hotmail that now evolved into Outlook.com and is extremely successful, or Visio that's now expanded to being online program, their whole Dynamics platform - multi billion business today - is acquired, and if recent years are more relevant to you then Accompli got them into mobile space after Windows Phone have been cut, HockeyApp is very popular mobile apps deployment tool if we look from mobile developer stand point - the war they lost as well. Let's add Xamarin to it - even if only for their tools for testigo apps on multiple phones. Mojang obviously is doing good. Revolution Analytics was such a good pick from marketing stand point that now less informed think Microsoft owns R language. N-trig is used in all Surface devices and some OEMs. Havok and PlayFab put them very relevant in games development space. LinkedIn is far from paying for itself but it's getting rapid growth so it might end up being one of the greatest.

In short, their business, cloud, development and hardware (other than Nokia) related acquisitions are nearly all successful. They fail in consumer space but it doesn't matter if Microsoft acquires a product and starts from scratch - they just don't know how to do stuff like that.",2018-06-03 12:21:22
62,"?? MS bought Xamarin

Xamarin bought RoboVM

You should be mad at the people who decided to sell RoboVM in the first place...lol",2018-06-03 12:45:32
63,"Agreed. 

Xamarin, open source, cross platform push - I love where its going. Say what you will about Microsoft, but good dev support is the sole reason for MS success and they know it. I dont see a problem with this acquisition.",2018-06-03 15:20:56
64,">I don't think anyone here has mentioned Xamarin. To my knowledge, after Xamarin was bought by Microsoft, a lot of their tools became free.

I imagine Xamarin wasn't mentioned because it's a pretty bad product.
You get what you pay for I guess because Xamarin have piss poor support and they treat their stable release as 'alpha' release. Every new 'stable' release introduce numerous bugs and regression. Try to continue working when their update broke their UI designer...",2018-06-03 16:11:47
65,"You can use C++ just fine on Android and iOS but truthfully it is often more trouble than it is worth. For games like Temple Run or Angry Birds it is overkill. You could easily develop those games in Java for Android with excellent performance. Or, like you mentioned, you can look at Unity to make targeting iOS and Android easier. Up to you though. 

IMHO if you want to do Android then learn Java. If you want to do iOS then learn Swift (and some Objective-C for working with older libraries). If you want to do both then Xamarin with C#. ",2018-06-03 16:39:49
66,Theyve done good with Xamarin and Accompli. Skype was already spoiled from Ebay long time ago. ,2018-06-03 17:10:36
67,"The company was running ads for programmers and all the sudden their ads went to Xamarin, then later in the year, they hired all Swift devs and even offered training for anyone interested in learning Swift.

So they moved, or tried to move both platforms over to Xamarin, then did a 180 and went back to native.  My guess is that they are too close to Silicon Valley and the supply of people willing to gamble their career on Xamarin wasn't enough for them to make it work.

All the new devs were Swift.

I follow these things because I'm all in with native and would hate to see that job market fall.",2018-06-03 17:17:47
68,Both of you dudes need to learn about the wonders of Xamarin,2018-06-03 17:40:16
69,"I used xamarin for one of my classes two semesters ago and everyone absolutely loved it over android studio. The only issues we had with it were the sqllight database that sucked to work with, and personally the primitive GUI building tools where you had to hand code everything instead of drag and dropping elements. Oh, should also mention the constant updating that broke your programs periodically. Other than that it was a great program to use for how simple it made it to create apps for both iOS and android, and windows phone if you still believed that was still alive, ha.",2018-06-03 17:57:31
70,"Their recent strategy is to adapt to a world where Windows is no longer dominant. So they want to have the best developer tools in the market, so developers choose to work with their tech anyway. Part of that is in buying Xamarin - if you're going to be developing cross-platform anyway, why not target Microsoft's platforms as a target as well? So they are trying to win mindshare as the company that makes the best cross-platform development tools in the business. Buying GitHub would strengthen that narrative",2018-06-03 18:01:44
71,"More examples http://www.theregister.co.uk/2016/03/31/xamarin_tools_code_free_and_open_source/

https://blogs.msdn.microsoft.com/azureservicefabric/2018/03/14/service-fabric-is-going-open-source/

https://github.com/dotnet/roslyn

VS code is also open source ",2018-06-03 19:05:23
72,"Microsoft open sourced most of Xamarins proprietary code and now I get to work on mobile tolls that are open source.

Mono, Xamarin for Android and iOS; Workbooks; Xamarin.Forms and much more.
 
Miguel",2018-06-03 19:56:59
73,"Excellent work my friend, very useful.  Happy you are learn react and apply it to this.  I think I gonna do something similar but with Xamarin.  Great inspiration.",2018-06-03 19:57:39
74,"Ohhhh, that VS for Mac. I'd forgotten about the Xamarin Studios rebranding, my bad.

I don't have a Mac, but if you launch a terminal and run the installer from it with some combination of /, -, or --, and ?, h, or help, (or maybe just ""man <exe>"") one of those should print the help information for the installer which hopefully includes logging. 

I'd try -h or -help first.",2018-06-03 21:11:21
75,"MS already caters to developers better than anyone else though.

VS Code, VS is even free for self devs. 

Not to mention the future of MS is with its Core stack and xamarin which is both open source.

Again...you shouldn't conflate their consumer line with their enterprise/dev line. ",2018-06-03 22:15:29
76,"I'm okay with this.

To those thinking MS will start mining GitHub hosted projects, I doubt it.
For the public repos, they can already do this if they want to (and have to verify Roslyn when they were developing that.)
For the private repos, VSTS already hosts a load of private repos so they could also do that now if they wanted to.

MS realise these services are built on trust, so even if they did want to go poking in to people's private repos, I don't think they would.

I suspect this will go more Xamarin than Skype. The only real affect of MS acquiring Xamarin was making it free to all and a bit more publicity at MS conferences than they had before. They seem to be doing the smart thing and pretty much letting them operate in the way that made them popular in the first place.

I suspect they will add extra optional integrations with VSTS, Azure, AAD, etc, the Azure Deploy button already exists so they are already quite well linked.

I know MS have a bad history of acquisitions, but the company is not the same since Satya took over and their only major developer-space acquisition in that time, Xamarin, has gone quite well in my opinion. I rarely use LinkedIn so can't really make a judgement on that acquisition.",2018-06-03 22:51:09
77,"It's what they did when they acquired Xamarin in 2016:

https://www.theinquirer.net/inquirer/news/2453055/microsoft-just-made-xamarin-free-for-everyone-and-open-source-to-boot",2018-06-03 22:52:13
78,"they botched some acquisitions and dint with others like LinkedIn, Minecraft, Xamarin. GitHub is too big a product to screw. so this is hopefully not a problem.",2018-06-03 23:05:21
79,Not sure about Xamarin.  I think thats still improving?,2018-06-03 23:20:50
80,"Microsoft did open source Xamarin after acquiring it. Could happen again, I would wait and see which way this goes before migrating. ",2018-06-03 23:28:29
81,"That's absolutely not true since the Satya became CEO. Linkedin, Maluuba, Xamarin, Mojang (Minecraft), Wunderlist and pretty much every other recent acquisition are doing great. Skype acquisition was almost 10 years ago, and Satya was fervently against the Nokia acquisition and shut down the whole initiative as soon as he became CEO. It makes more sense to look at what Microsoft achieved in recent years rather than bring up examples from 10 years ago.",2018-06-03 23:33:38
82,"That's not true of most recent acquisitions. People keep bringing up 10 years old example like the Skype acquisitions, but if you look at any acquisitions under Satya (Linkedin, Xamarin, Wunderlist, Mojang - Minecraft), they are all doing superbly. ",2018-06-03 23:40:25
83,"Xamarin didn't shut it down. Besides, the whole thing took place over the course of six months, so it's highly unlikely that Microslft wasn't behind the whole thing.",2018-06-04 00:00:44
84,"Doesn't sound all that bad: https://www.theverge.com/platform/amp/2018/6/3/17422752/microsoft-github-acquisition-rumors

>	Microsoft is the top contributor to the site, and has more than 1,000 employees actively pushing code to repositories on GitHub. Microsoft even hosts its own original Windows File Manager source code on GitHub

>	Microsoft has been rapidly investing in open source technology since Satya Nadella took over the CEO role. Microsoft has open sourced PowerShell, Visual Studio Code, and the Microsoft Edge JavaScript engine. Microsoft also partnered with Canonical to bring Ubuntu to Windows 10, and acquired Xamarin to assist with mobile app development.

>	Microsoft is also using the open source Git version control system for Windows development, and the company even brought SQL Server to Linux. Microsofts Visual Studio Code, which lets developers build and debug web and cloud applications, has soared in popularity with developers. Microsofts GitHub acquisition will likely mean well start to see even closer integration between Microsofts developer tools and the service. At Build last month, Microsoft continued its close work with GitHub by integrating the service into the companys App Center for developers.

Microsoft really can't or shouldn't do too much nefarious things to it since nearly every major tech company also uses it. What's good about buying Github and then having everyone scream and run from it?",2018-06-04 00:18:09
85,"The ""Mac version of Visual Studio"" is **not** a port of Visual Studio to macOS - it's Xamarin Studio.

Use Visual Studio Code with the appropriate extension(s) to do PowerShell on macOS.",2018-06-04 01:29:30
86,Are you able to give me an example of this? The only product I've really used that Microsoft has purchased is Xamarin and honestly a lot of the changes MS brought to it were for the better,2018-06-04 01:42:11
87,"Thank you for the response, if microsoft is hands on with GitHub is it generally the consensus that all the changes they'll bring are going to be negative? Because like I mentioned, I used Xamarin a bunch in school and I really liked what Microsoft was able to bring to that product \(lots of support and plugins written by Microsoft developers etc\)",2018-06-04 01:57:15
88,"Yes, just like how when they acquired Xamarin they ruined it by making it open source and free for everyone. ",2018-06-04 02:26:50
89,"Did you read the link you posted?

It is about proving that EEE is / was a strategy used by MS. I'm not denying that it was used by them in the 90s and early 00s.

I'm challenging you to find me an example of them using this strategy in the last 15 years to Embrace, Extend and Extinguish anything else.

MS is a much different company and has changed leadership and direction multiple times since then. EEE is a dead strategy and to be bringing it up in threads like this is fear mongering.

https://www.theinquirer.net/inquirer/news/2453055/microsoft-just-made-xamarin-free-for-everyone-and-open-source-to-boot

MS has done more for open source in the last few years than any other big tech company.",2018-06-04 02:29:31
90,"Why would they make it more expensive?

Xamarin used to cost a lot of money to use, but when Microsoft acquired them, they made most of it completely free.",2018-06-04 02:34:02
91,"You're right, I am getting a little ahead of myself. What I mean is that Microsoft making bad software has largely been a thing of the past. Their dedication to open source projects now (TypeScript, dot net, Xamarin, VS code, Monaco, Microsoft Edge's engine, cognitive toolkit, PowerShell, Unity mixed reality toolkit, Healthbot, AppCenter - and 1824 other repos) makes it seem like they are headed in a different direction than money grabbing. ",2018-06-04 02:37:36
92,"It depends on what languages you're using already.  You can use Visual Studio for C#, C++, Python, F#, and a few others.  If you're programming C++ for windows, it's probably the best debugger on that side.  I believe you can also get the Xamarin tools, which will allow you to use C# to code Android and iOS apps.

As for Azure, it's a cloud platform.  That and Amazon Web Services and Google's Cloud service are the current big dogs in that space.  It's worth learning it.  I'm guessing your just starting out, and somewhat new, so cloud stuff might be a bit more advanced, but there are plenty of tutorials and it's worth playing with if you're getting monthly azure credits to use.",2018-06-04 02:53:13
93,"Most of the acquisition since Satya have been doing good. Linkedin, Minecraft, Wunderlist, Xamarin to name only the well-known ones. Acquisition back in Ballmer's time were another story.",2018-06-04 04:01:49
94,"They already make the best free, open source, electron editor out there: VS Code (https://github.com/Microsoft/vscode). They have over 1,800 open source repositories on github as well. It makes sense for them to want to be able to control it and make sure it stays active/open.

People forget that they used to offer codeproject which was free open source hosting, which they recommended people move to github because it was better, and that they currently offer **free private repos (github charges!)** for git as well as VSTFS from VSTS.

Visual Studio is free for many users (basically only large businesses / enterprise is charged). Xamarin is now free / open sourced, VS Code is free for all and open sourced. Dot Net Core is free/open sourced / runs natively everywhere. Sql server runs natively on *nix now as well.

MS has changed a lot and completely embraced open source and want to keep it alive because it benefits them. Buying github makes sure it has funding / backing.",2018-06-04 04:07:52
95,Yes I do. Look at Xamarin.,2018-06-04 04:21:20
96,"Yeah... Like when they bought Xamarin and made it free, right? Money maker. ",2018-06-04 04:26:27
97,"Other than Skype, can you name any other example? LinkedIn is doing fine, Xamarin/Mono have improved constantly, Minecraft isn't much worse than before.",2018-06-04 04:37:48
98,Xamarin isnt really going anywhere tbh lmao. Barely anyone wants to run .net code other than on microsoft products. Trying to push that to mobile and macos isnt really anything worth talking about,2018-06-04 04:52:44
99,You mean like Xamarin that used to have a paywall and then went free from the moment MS bought them?,2018-06-04 05:31:28
100,"Sure, lots of MS aqisitions have gone bad. So many have gone well and benefitted from it. In this case the company isn't profitable and lacks a CEO. Going under the wing of their biggest contributor is a pretty good deal here.

Xamarin went free the moment they were bought out by MS and that's the last time they bought a coder thing, not exactly bad for us, right?",2018-06-04 05:37:02
101,"https://medium.freecodecamp.org/the-top-contributors-to-github-2017-be98ab854e87

Main contributions in open source: .NET Core, Visual Studio Code, Typescript, sysinternals tools, docker, Xamarin.

Their development focus has been open source ever since Sataya came.

Funny mentions:

* [Windows File Manager (WinFile)](https://github.com/Microsoft/winfile)
",2018-06-04 06:17:47
102,"The answer to what is different may well be ""not much"". Xamarin hasn't changed much since Microsoft acquired them, same for LinkedIn from my admittedly limited use of them.

In years gone by, you knew when Ms acquired a company, they'd clumsily try to absorb them in to Microsoft culture and destroy what made them successful in the process. They seem happy to be a bit more hands off these days.",2018-06-04 06:39:26
103,"Remember what happened to Xamarin, which was actually a development focused company like GH is. It improved greatly.",2018-06-04 07:34:07
104,VS for Mac is purely a marketing stunt. It has nothing to do with Visual Studio. It is a rebranded Xamarin Studio (which was a rebranded Monodevelop BTW) and existed on Mac for quite some time.,2018-06-04 08:08:41
105,"Xamarin/Microsoft bought RoboVM and they killed it. That's unfair competition.
",2018-06-04 08:44:52
106,"That's a little different. Xamarin is a framework that is meant to be included in your own code.

Releasing GitHub as FOSS would make it possible for an army of low-rent scammers to perfectly phish any GitHub user with an exact copy of their site.",2018-06-04 08:54:55
107,Or maybe it was a doomed project which is was years behind Xamarin.,2018-06-04 09:05:08
108,"Don't think that would be the case. When they acquired Xamarin, they made it free and integrated with Visual Studio.

Knowing Microsoft and it's relationship with open source, I got a feeling they would a) add a tighter integration with their IDE; b) make private repositories free; c) or merge GitHub with Team Foundation.

But we can all agree on seeing LinkedIn popping up on GitHub in the near future (imagine linking your LinkedIn on your GitHub profile)",2018-06-04 09:15:43
109,"> MS's history of completely fucking up anything it acquires

That's not true. LinkedIn is fine (I think. I don't use it), Minecraft is doing amazing. Xamarin ended up being open sourced. Hotmail merged into Outlook which isn't bad.",2018-06-04 09:52:34
110,"Literally anything they buy becomes unusable. 

Slow with useless features. 

LinkedIn, Skype, Xamarin etc. 

LinkedIn with that new UI is even slower. You just wait while it all loads, really messy profile page.

Skypes native apps branch is almost dead, just Electron websites.",2018-06-04 10:44:43
111,"They respect the originsl version of minecraft that linux uses. They havent harmed it and kerp adding new resourcrs. They left linkedin alone. Honestly, they usually leave their acquisitions alone. I wonder if the original skype team just quit, which is why skype fell apart. They do buy all these things for a reason but tend to let what was there alone.

This deal might be about atom and electron and the fact that all their open source is on github (they are the biggest contributor). Their drv side has always been good and now with the new leadership and a change in focus its bern awesome. The only change you will see is better prices. My examples for this is that

1) visual studio gteam services is free for both public and private

2) when they bought xamarin, they made it completely free so dotnet devs could easily port yo iOS and android. ",2018-06-04 10:45:02
112,"Millions of webdevs, game devs, engineers, etc, all using tools like Windows 10 and Visual Studio Code and Visual Studio and Direct X and Microsoft Office, PowerShell, .NET, Xamarin, Azure and beyond(maybe even One Drive and so forth): AW man fuck Microsoft! I'm moving to GitLab now!
(Continues to use these very same Microsoft tools, but on GitLab now)",2018-06-04 10:53:31
113,Xamarin bought RoboVM. Later MS bought Xamarin - they had no interest in RoboVM in the first place. The purchase of Xamarin was a good move for developers,2018-06-04 11:00:45
114,"Well, I mean, I used to hate them too, I used to write Micro$hit on public forums (well, nntp). But I don't think that's it. People can't differentiate between business-oriented acquisitions, like Skype or maybe even Minecraft, and them trying to expand their platform, oriented towards developers. So they're scared github will end up like Skype, when instead I think it's going to be like Xamarin did (more open opened, accessible, cheaper, easier to use, better integrated with MS dev portfolio, etc.) 

People are scared private repos will get more expensive, I would not at all be surprised if they announced limited free private repos for example.",2018-06-04 11:18:44
115,"Care to elaborate or are you just going to talk empty, offending shit?

In my opinion they're very different. They're shifting their focus from software space domination over to cloud services. Developing and open sourcing asp.net core, trying to bring more developers in with Xamarin, SQL Server running on Linux, VSCode and SQL Studio being available and even marketed with focus on other platforms all show that.",2018-06-04 11:22:27
116,"What about LinkedIn, minecraft, or xamarin?",2018-06-04 11:40:05
117,"They haven't ported it anywhere else, either - but then it's [primarily] their main developer tool for building Windows applications, so I'm not sure how useful it would be on Linux? 

Visual Studio for Mac is a *completely* different animal, previously known as Xamarin Studio for Mac. It's nearly as confusing as Java vs Javascript :)",2018-06-04 11:41:55
118,Isn't it Xamarin Studio now?,2018-06-04 11:58:14
119,Nope. I expect it to improve like minecraft or even better xamarin,2018-06-04 12:49:45
120,Ooh like the xamarin office.. Oh wait,2018-06-04 12:51:32
121,"""Xamarin Studio"" has been canceled a year ago.

You can read more about it here: https://developer.xamarin.com/releases/studio/xamarin.studio_6.3/xamarin.studio_6.3/

It was based on MonoDevelop.",2018-06-04 13:08:21
122,"I won't say they're neither of those things, although for some I don't think I know specific examples you had in mind and some I think are heavily based on what they used to do. 

Overall, I'd say you're probably mostly right, if we're talking about consumer-space. 
Github is a developer tool though, and I think it's fair to say that MS has always tried to maintain a good relationship with developers. I'm not trying to defend them, I just think they're not going to ruin github, just like they didn't ruin Xamarin. 

So let's say - assuming they build an Azure deployment agent - they won't necessarily build one for AWS - because why the fuck would they. But I don't think they'll disable any of the features github has right now that lets you integrate with anything else. What's there to gain? People have choices now, they'll just take their code and move elsewhere and probably won't ever consider Azure again.

NB, I don't give a fuck either way. All my repos are already on gitlab and some hosted privately, I don't have MS stock nor is Windows my primary dev environment outside of work. Even my one single asp.net core project is developed under Linux and I have it deployed on Linux servers.",2018-06-04 13:09:19
123,"Other thing to note:

>Microsoft Corporate Vice President Nat Friedman, founder of Xamarin and an open source veteran, will assume the role of GitHub CEO. GitHubs current CEO, Chris Wanstrath, will become a Microsoft technical fellow, reporting to Executive Vice President Scott Guthrie, to work on strategic software initiatives.

I think it's fair people are skeptical over this but I think Satya Nadella has been really pivoting Microsoft into a better direction. 

[Here is an article about the reason Microsoft bought LinkedIn.](https://www.wired.com/2017/03/now-we-know-why-microsoft-bought-linkedin/) 

TL;DR: Microsoft wanted better connections to developers and silicon valley companies and Reid Hoffman was that bridge to connect the two.

I think this is another move on Microsoft to help appeal to developers for their Azure services which they are claiming to be the future of their company. Interesting move for sure.",2018-06-04 13:12:59
124,"Also new Github boss:

> Once the acquisition closes later this year, GitHub will be led by CEO Nat Friedman, an open source veteran and founder of Xamarin, who will continue to report to Microsoft Cloud + AI Group Executive Vice President Scott Guthrie; GitHub CEO and Co-Founder Chris Wanstrath will be a technical fellow at Microsoft, also reporting to Scott.",2018-06-04 13:18:29
125,"Also new Github boss:

> Once the acquisition closes later this year, GitHub will be led by CEO Nat Friedman, an open source veteran and founder of Xamarin, who will continue to report to Microsoft Cloud + AI Group Executive Vice President Scott Guthrie; GitHub CEO and Co-Founder Chris Wanstrath will be a technical fellow at Microsoft, also reporting to Scott.",2018-06-04 13:18:42
126,"Yeah because they can't re-implement something like WPF for other platforms (since it's heavily tied to Direct X). But .net 4.x is already not cross platform, so .net core 3.x will be feature complete with .net 4.x.

> No cross-platform GUIs in the foreseeable future.

I don't understand why people keep saying this. Xamarin Forms is cross platform and the latest previews have support for iOS, Android, Windows mobile, Windows (WPF or UWP), Mac and Linux. 

It's cross platform, and really it's the best model that could be used for a cross platform system (common core set of components with a good model for extending on particular platforms). 

https://docs.microsoft.com/en-us/xamarin/xamarin-forms/platform/",2018-06-04 13:21:50
127,"A fair number of it is people who still think of MS as it was a couple decades ago. Despite the fact that they've done huge, absolutely amazing things for the open source community, some clueless people still see them as evil.

There's actually a non\-negligible chance that MS will open source github. That was one of the first things they did after acquiring xamarin. ",2018-06-04 13:33:31
128,"https://techcrunch.com/2018/06/04/microsoft-has-acquired-github-for-7-5b-in-microsoft-stock/

Former Xamarin CEO Nat Friedman (and now Microsoft corporate vice president) will become GitHubs CEO.",2018-06-04 13:33:50
129,"Isn't Xamarin, Mono instead of Dotnet Core though? They're two completely different things (unless I'm misunderstanding how Mono, Dotnet and Dotnet Core fit into the entire C# ecosystem).",2018-06-04 13:34:18
130,"Also new Github boss:

> Once the acquisition closes later this year, GitHub will be led by CEO Nat Friedman, an open source veteran and founder of Xamarin, who will continue to report to Microsoft Cloud + AI Group Executive Vice President Scott Guthrie; GitHub CEO and Co-Founder Chris Wanstrath will be a technical fellow at Microsoft, also reporting to Scott.

Nat Friedman is one of the Ximian/Xamarin guys that used to work on Gnome and then on Mono. He has a ton of FOSS experience.",2018-06-04 13:39:23
131,"Did you go detective on my account? Wow, internet points for you.

No, I'm being pretty objective about it. Tell me more how they ruined Linux when they contributed to the kernel multiple times.

Also:

> Once the acquisition closes later this year, GitHub will be led by CEO Nat Friedman, an open source veteran and founder of Xamarin, who will continue to report to Microsoft Cloud + AI Group Executive Vice President Scott Guthrie; GitHub CEO and Co-Founder Chris Wanstrath will be a technical fellow at Microsoft, also reporting to Scott.",2018-06-04 13:52:30
132,"I'll admit, a few years ago I had little trust in Microsoft and would have viewed this purchase as disastrous for an amazing development platform like GitHub. However, Microsoft over the last few years has really surprised me and is earning my trust back. They've made some excellent steps towards an open, developer friendly ecosystem. To name a few, they built a seriously amazing editor, visual studio code, open sourced .Net Core and made it cross platform, did the whole xamarin move, active  in JS space with the Chakra JS engine. They also have created some amazing cross platform languages like Typescript and C# too. Credit where it's due, I have hopes and renewed faith that this purchase will be great for everyone.",2018-06-04 13:52:58
133,"yes, their current team services is free private repos. Also they made Xamarin free. ",2018-06-04 13:53:27
134,"You guys are annoying. Seriously.

Are we back in the 90s? Do you guys just have long memories for this one particular company? lol

When Xamarin was bought out all that happened was it went open source lmao.

",2018-06-04 13:54:18
135,"Xamarin is 1st party. Microsoft owns it, microsoft directs it.

It's not part of the framework itself, but that's mostly because it doesn't make sense to have a GUI library (and all it's associated overhead) in a standard library. I don't know any language where GUI is part of the framework itself (with the exception of toy languages like small basic).",2018-06-04 13:58:35
136,"> Under the terms of the agreement, Microsoft will acquire GitHub for $7.5 billion in Microsoft stock. Subject to customary closing conditions and completion of regulatory review, the acquisition is expected to close by the end of the calendar year.

> **GitHub will retain its developer-first ethos and will operate independently to provide an open platform for all developers in all industries.** Developers will continue to be able to use the programming languages, tools and operating systems of their choice for their projects  and will still be able to deploy their code to any operating system, any cloud and any device.

> **Microsoft Corporate Vice President Nat Friedman, founder of Xamarin and an open source veteran, will assume the role of GitHub CEO.** GitHubs current CEO, Chris Wanstrath, will become a Microsoft technical fellow, reporting to Executive Vice President Scott Guthrie, to work on strategic software initiatives.

Pretty interesting press release.",2018-06-04 14:08:44
137,"Unless your head has been in sand you have seen them change.

C# is open source, TypeScript is open source, VS Code is open source. Almost everything they do these days is open source, and they make good use of the open source community's tools.

The first thing they do after acquiring xamarin was make them free and more open source (it was open source, but with proprietary extensions, like gitlab). 

Eclipse and other editors have started picking up the standard that VS Code made for language integration.

And this has been years now. They made serious changes, doing open first.

In fact in this case I think there's a fairly decent chance that they'll actually open source github. ",2018-06-04 14:09:28
138,Xamarin 2016,2018-06-04 14:11:04
139,"It's fine.

They didn't break LinkedIn or Xamarin.

Skype was 11 years and 2 CEOs ago.

Most people crying now and butthurt Linux fanboys who can't handle the truth that GitHub was losing money.",2018-06-04 14:13:13
140,"^Thelinkedtweetwastweetedby[@TechCrunch](https://twitter.com/TechCrunch)onJun04,201814:12:00UTC(6Retweets|0Favorites)

-------------------------------------------------

RT [@ingridlunden](https://twitter.com/ingridlunden) : All-stock deal, CEO is stepping down to do something as-yet unnamed at Msft, Xamarin head will lead GitHub. This was a mi

-------------------------------------------------

^^BeepboopI'mabotFindoutmoreaboutmeat/r/tweettranscriberbot/",2018-06-04 14:14:34
141,"With Nat Friedman taking over GitHub, it is more like Xamarin acquired GitHub :)",2018-06-04 14:21:01
142,">  You might as well complain about file being part of standard libraries

Actually I might. It's one of the main reasons why there was such a mess with PCLs and why things like Android can't support the full java library.

File systems have different APIs on different OS's. It's hard to come up with a lowest common denominator of it that still does what you want.

GUI is even more in this stretch. GUI systems are constantly evolving, and any decent GUI system is very closely integrated with the OS and even hardware of the machine. GPU acceleration is necessary.

GUIs are the heaviest things we build still. And they are still the things we haven't really found a good way of doing yet. Even very recently we've gotten entirely new paradigms of GUI programming. 

> WPF is part of the .NET framework

WPF is not part of the .NET framework. It's built on top of it, and shipped along with it. Xamarin Forms is the same thing. ",2018-06-04 14:32:19
143,"That's scary. Xamarin is a complete mess, easily the worst dev-facing MS technology I've had the pleasure to work with.",2018-06-04 14:32:48
144,But it in and of itself isn't FOSS. Neither was Xamarin until Microsoft was involved and wanted more devs on that platform.,2018-06-04 14:34:11
145,"Or you know, 2015/2016 when they plowed over [RoboVM](https://en.wikipedia.org/wiki/Xamarin#RoboVM).",2018-06-04 14:41:08
146,"Honestly, as a veteran Xamarin developer, I agree.   I've never seen a company so massively out of touch with their own developers as Xamarin during his tenure as CEO.  It's got a little better since they joined MS, but not a huge amount.  He's never struck me as someone who gives a fuck about the people who use his technology.",2018-06-04 14:45:21
147,"Get off your high horse, in recent years with the new CEO Microsoft has done nothing but good thing for Open Source and Linux. Did they murder Xamarin? No. Did they murder Linkedin? No.",2018-06-04 14:48:02
148,"I said this in another discussion but..

Honestly, as a veteran Xamarin dev since the monotouch days, I disagree. I've never seen a company so massively out of touch with their own developers as Xamarin during his tenure as CEO. It was bordering on ridiculous how they hyped up their new releases which were buggy as fuck. It's got a little better since they joined MS, but not a huge amount. He's never struck me as someone who gives a shit about the people who use his technology.  He's also not the great OSS guy he's being made out to be.  I don't think he's involved in the engineering side at all.  He's a business suit who just found it a good place to make a load of money.",2018-06-04 14:53:15
149,How about Xamarin?,2018-06-04 14:54:11
150,"Don't use Xamarin but LinkedIn has become a slow pile of crap. I manage two company pages on it and it's 3\-5 times slower than Facebook or Twitter. It's convoluted too, it's hard to find your own posts and often posted stuff just doesn't show up until 5 minutes later.

I've never really liked Skype so I'll stay out of that.",2018-06-04 14:56:49
151,"I suspect Microsoft is waiting for the Xamarin Forms support for desktop platforms (macOS, WPF, GTK#) to mature before committing to standardizing anything.",2018-06-04 14:57:25
152,"Many people remember Microsoft as it was in the 90s. At the time they had a policy known as embrace, extend, extinguish which they used to kill off competing companies and technologies. The browser wars between Netscape and Internet Explorer and the resulting antitrust lawsuit exemplified who they were as a company.

A lot has changed in the last 15 years and so I expect youll have a harder time finding recent examples of such anticompetitive behavior.

Additionally many people look at other recent acquisitions such as LinkedIn and Skype and note degraded experiences there though this may be a result of cherry picking examples because they ignore Minecraft and Xamarin.

Microsoft is a company just like Google, Apple, and GitHub itself. Its trying to make money and the way to do that is typically to make your users happy. My personal opinion is that theres nothing to worry about now and that we should just continue on as we have been. If GitHub sucks in the future then move onto one of its competitors just as you would even if it wasnt owned by Microsoft.",2018-06-04 15:04:05
153,"That was because of Xamarin.

Blaming MS for that makes little to no sense at all",2018-06-04 15:14:26
154,"This sounds like GNOME.

No wonder - was started by the same dude as Xamarin's founder.

Also, it is no longer a surprise how much he promoted Microsoft for all his life. :)",2018-06-04 15:19:11
155,"Of course - mono and Xamarin.

It always was Microsoft, just with a thinly disguised veil of it being ""open source and independent"". Although I must admit, open sourcing something is good. It is better than closed source software.",2018-06-04 15:19:59
156,"Yes, really, yes.

See Mono/Xamarin too. And the recent co-operation between Red Hat and Microsoft. Also systemd - makes a LOT more sense if you view it from a corporate point of view than solo devs.",2018-06-04 15:30:32
157,"Github is superiour in many ways. First of all the discovery of new repos among others. 
If you just want your code hosted somewhere and dont care about other people finding it, you can head to gitlab, bitbucket or others. You can also host your own gitlab or just an ssh git instance. 

For open source stuff. Just stick with Github. What is the worst they can do within a year? Make you pay for private repos? Oh wait...

Really... if they fuck it up, it is over the course of years. Just stick around. Maybe it gets better (xamarin,vscode, .net etc). ",2018-06-04 15:36:49
158,"You implied what happens in 10 years now that MS owns the place.

MS could be replaced by any other company, even github itself. I think it's a rather weird argument.

Anyway, open source fan and former xamarin CEO is now in control of github. He's a cool dude, he worked on mono. We'll be ok",2018-06-04 15:46:18
159,"> what the hell does the Microsoft acquisition of GitHub have to do with cloud?

One of the major missing features of github is a build/deploy pipeline. MS has a (mostly open) one in VSTS that uses all the popular build tooling (from the open source community). They'll almost certainly bring this to github.

Having it easier to deploy stuff to the cloud on github means more people will do that. That'll make that market bigger. That market being bigger means more money for them.

It has everything to do with the cloud. Azure is where they are planning to make all of their money from devs in the future. If you've paid attention to them even in the slightest you'd see this. 

> please respond to my first comment about EEE

The memo from 1996? You're basing everything on an email from the 90s. That doesn't tell you anything about a company in 2018. Almost none of the same people work there, and upper management has 
changed several times.

EEE applied to office most strongly, and one of the major things they had was not allowing office on other platforms. They've long since taken the initiative to put office on competitor products. 

They've since done  a lot towards open source, open sourcing the vast majority of their developer tools (anything new is open source). They even bought an open source company (Xamarin) and made it more open source by opening up their proprietary extensions. 

They've led the Open Language Server and been a huge part of the more recent web standards. ",2018-06-04 16:06:43
160,"This is incorrect. Microsoft bought Xamarin and made it free, for example",2018-06-04 16:15:55
161,"If your company wont upgrade to VS2017 right now, you could use VS Code if youre doing stuff like ASP .NET, Azure Functions, Bot Framework, etc. (but not Windows dev or Xamarin) 

But if you plan on using the full VS for .NET Core development, you should be using VS2017 over VS2015. 

Even when 1.x was the current release, the documentation suggested using 2017 instead of 2015: It's possible to use Visual Studio 2015 for .NET Core 1.x development, but it's not recommended for the following reasons:
* The .NET Core tooling is a preview version, which is not supported.
* The projects are project.json-based, which is deprecated.

* Source: https://docs.microsoft.com/en-us/dotnet/core/windows-prerequisites?tabs=netcore1x ",2018-06-04 16:30:22
162,"I appreciate that they don't just buy shit up to prevent others from using it.  I use a game engine for work (Unity3d) and for 10 years they couldn't get a license for a new version of the framework it was built on (Mono), a company called Xamarin controlled the licensing and wouldn't cut a new deal. Microsoft started to use the game engine, even though it's not their own, they made the game engine the default tool for hololens development, then they bought xamarin and gave Unity a license for the latest greatest. 

Apple on the other hand has pulled food off my table 3x, they bought primesense and pulled the plug, bought MetaIO and pulled the plug, and Foundation DB they bought and pulled it out of the playground. ",2018-06-04 16:35:34
163,"Have you viewed your website without an adblocker recently? It's hard to take it seriously as a development tool when literally there's a scroll of ads down the right hand side when I'm looking at a repo.

I mean literally compare (as a ""signed out"" user):

https://github.com/xamarin/Xamarin.Forms/
https://sourceforge.net/projects/freedos/files/

I think the core differences here is that GitHub from its inception was a collaboration platform for projects and people to collaborate easily using Git (comments, pull requests, threaded discussions). SourceForge is a software distribution platform with source control built in.

First impression matter and as a developer, I see all the ads/noise and immediately turn away.",2018-06-04 17:00:18
164,"Yeah I don't think they're the worst company, but they aren't exactly consumer friendly. Have you seen their macOS EULA? It forbids you from running it on non-Apple hardware. Microsoft can't cut out the Mac for Xamarin.iOS development because Apple will sue them.

Apple does some good stuff, but they also act like a whiny two year old in the software development area.",2018-06-04 17:07:36
165,"They also purchased Xamarin (cross-platform development tool), made it free (used to be quite pricey) and open-sourced it. I really hate that people keep bringing only Skype. Microsoft seems to really change its attitude towards open source products.

> VSCode

Not just VSCode but TypeScript as well which it is build with.",2018-06-04 17:09:35
166,Visual studio on Mac isn't actually VS. It's just a rebranded Xamarin Studio. ,2018-06-04 17:16:22
167,"Github isn't even OSS. Microsoft bought Xamarin, a large player in the cross platform mobile market which was closed source. Microsoft then open sourced it within a matter of weeks.",2018-06-04 17:21:07
168,Everyone forgetting that Microsoft open-sourced Xamarin post-acquisition? ,2018-06-04 17:23:43
169,"Yes. A shit ton.

Immediately following Satya's take over, the powershell team announced adoption of open source implementation of SSH for windows. Their wording is very telling

> As Microsoft has shifted towards a more customer-oriented culture, Microsoft engineers are using social networks, tech communities and direct customer feedback as an integral part on how we make decisions about future investments. A popular request the PowerShell team has received is to use Secure Shell protocol and Shell session (aka SSH) to interoperate between Windows and Linux  both Linux connecting to and managing Windows via SSH and, vice versa, Windows connecting to and managing Linux via SSH. Thus, the combination of PowerShell and SSH will deliver a robust and secure solution to automate and to remotely manage Linux and Windows systems.

> SSH solutions are available today by a number of vendors and communities, especially in the Linux world. However, there are limited implementations customers can deploy in Windows production environments.  After reviewing these alternatives, the PowerShell team realized the best option will be for our team to adopt an industry proven solution while providing tight integration with Windows; a solution that Microsoft will deliver in Windows while working closely with subject matter experts across the planet to build it. Based on these goals, Im pleased to announce that the PowerShell team will support and contribute to the OpenSSH community  Very excited to work with the OpenSSH community to deliver the PowerShell and Windows SSH solution!

> A follow up question the reader might have is When and How will the SSH support be available? The team is in the early planning phase, and therere not exact days yet. However the PowerShell team will provide details in the near future on availability dates.

> ***Finally, Id like to share some background on todays announcement, because this is the 3rd time the PowerShell team has attempted to support SSH.**  The first attempts were during PowerShell V1 and V2 and were rejected.  ***Given our changes in leadership and culture, we decided to give it another try and this time,*** because we are able to show the clear and compelling customer value, the company is very supportive.  So I want to take a minute and thank all of you in the community who have been clearly and articulately making the case for why and how we should support SSH!  Your voices matter and we do listen.


They welcomed Linux distributions to run first party on the Windows Kernel. They are partners with Ubuntu, Fedora, Mint and Open Suse

They opensource many significant projects (including Xamarin related to the above)

Made VS free with Community, open sourced VS Code and ported it to all three major platforms. 

They with Google, were the first authors on the technology that Apple adopted as their own for privacy.

I'll let MS finish

> And Microsoft is all-in on open source. We have been on a journey with open source, and today we are active in the open source ecosystem, we contribute to open source projects, and some of our most vibrant developer tools and frameworks are open source. ***When it comes to our commitment to open source, judge us by the actions we have taken in the recent past, our actions today, and in the future.***


",2018-06-04 17:31:27
170,The Xamarin purchase and the handling of it since then has been awesome. The technology has come so far since they've purchased it. ,2018-06-04 17:43:17
171,"> microsoft shits on open source

Microsoft is currently the number one contributor to GitHub.
https://octoverse.github.com/

> They are mad because they cant compete with FOSS

https://github.com/microsoft


Roslyn, Xamarin, VS Code, .NET Core, Chakra engine (Edge JS engine), TypeScript, SQL Op Studio, and many more.

> Their business model is to shove their products in your face and shoehorn you into their way of things.

As opposed to other companies like Google or Apple? Most companies want you in their ecosystem.
",2018-06-04 17:58:57
172,"If you've not already read it:

>Former Xamarin CEO Nat Friedman (and now Microsoft corporate vice president) will become GitHubs CEO. GitHub founder and former CEO Chris Wanstrath will become a Microsoft technical fellow and work on strategic software initiatives. Wanstrath had retaken his CEO role after his co-founder Tom Preston-Werner resigned following a harassment investigation in 2014.

>The fact that Microsoft is installing a new CEO for GitHub is a clear sign that the companys approach to integrating GitHub will be similar to hit it is working with LinkedIn. GitHub will retain its developer-first ethos and will operate independently to provide an open platform for all developers in all industries, a Microsoft spokesperson told us.

[Source](https://techcrunch.com/2018/06/04/microsoft-has-acquired-github-for-7-5b-in-microsoft-stock/)",2018-06-04 18:02:53
173,They also did well with Linkedin and Xamarin. I also still use wunderlist and haven't noticed any changes since the MSFT acquisition.,2018-06-04 18:14:48
174,"\>used much  


aside from the language server, I don't see anymajor OSS projects that use .NET. I don't see any major OSS projects using xamarin, I don't see anyone with 100 gb git repos, I don't see anyone who gives too many shits about the .NET foundation. Wow they did something for their own closed source operation system, so generous. Wow they brought a small subset of ubuntu to windows 10, Stop the presses. Not like that many people use that though, after all, who wants to be subject to windows bloated garbage?  


I get it, microsoft is really trying really fucking hard to change their image into one that supports OSS, and puts a lot of fucking effort into it. That's pretty obvious from all the hired shills swarming reddit, but the reality is that microsoft is just pouring effort into dozens of tools that no one wants to use.",2018-06-04 18:26:51
175,Xamarin springs to mind.,2018-06-04 18:30:44
176,"Microsoft is doing many great things for developers. Making Xamarin free, .Net Core (which is open source), TypeScript, Visual Studio Code, some of their libraries, ... ",2018-06-04 18:42:49
177,"yea and they killed the only good option at the time of running java on iOS along the way (RoboVM), which was suspiciously bought by Xamarin very shortly before Microsoft bought Xamarin. I don't think they changed, and if they did, it's only temporary",2018-06-04 18:54:07
178,"I mean...Github itself is not open source.

We need to clarify the difference between platforms being open source, and platforms being used for open source development.

VS is not open source and the full client is windows only, but if you want to use it to do open source development, use git, etc.  you can.  That goes even further when you look at the VSTS ecosystem, with further git integration and crossplat for build agents.  Further, they bought Xamarin because they want to extend VS to MacOS, and it seems that they are trying to converge products (not sure how successful that will be though).

Not to mention other stuff like VS code and .NET core.  I am not even a programmer, just an IT ops guy that does a teeny tiny bit of devops, and I know how serious MS is about dev tools / platforms / services and open source.",2018-06-04 18:54:12
179,">MS does not have a good track record of leveraging their acquisitions.  Historically, they just fuck em up.

I would disagree with that.

For example: Mojang, Xamarin, or even linkedin",2018-06-04 19:02:16
180,"Xamarin, Minecraft, LinkedIn.

Stop overreaching for examples from 10 years ago, and look at their latest track record. All of those are either just the same, or better than they were before being acquired.",2018-06-04 19:02:35
181,"Very interesting indeed.  
I know about the xamarin project, but this guy don't look to be ""Active in Open Source"" as he claims.

I don't know, but github acquisition still strange to me.",2018-06-04 19:23:13
182,"> Im confident that this change will be great for GitHub and developers
> around the world

I am sure it will be great for GitHub. There goes the richesssss!

But ... great for developers around the world?

Why?

Do they see any of the money? Of course not. GitHub pockets in, waves
to them and says ""keep on using github, you made us rich for free, hahaha!"".

I don't think this is nice of github. Kind of undeserving to the solo devs out
there.

> Two years ago I joined Microsoft when it acquired Xamarin, a
> developer-focused company I started with Miguel de Icaza.

Nobody is surprised - and it's perfectly fine. People use your software?
That is great. Just don't make it sound as if you did it for the better
of mankind.

> I was delighted to see that Microsoft was broadening its horizons
> as a developer-centric company by rallying behind technologies
> like Linux, Git, node, and Kubernetes. 

Oh yeah, altruism. Sorta like Google optimizing drone-killings for
the US governments (though some google employee worker drones
at the least objected to this Evil).

I am sure the +7 billion was ABSOLUTELY NO REASON AT ALL
for handing over github to Microsft. None. Nada. Had nothing to do
with it. It was all about linux, open source, free love and those kind
of things. Sorta like the oldschool hippies, before the hipsters.

> Microsoft had become a massive contributor to open source

Ya ya ya... so many promos. Must promote new master.

Note - I don't think many doubt that Microsoft HAS contributed
to several open source project. But none of this explains the
+ SEVEN BILLION TAKE OVER THERE - other than control.
And corporate strategy.

Perhaps it is to break into amazon's cloud share. Perhaps for
other reasons. Who knows.

But all the PR so far does not explain the +7 billion take over
really - and even less so as to why developers would even
WANT that. I mean those who are not employed by github
and Microsoft, because obviously those who are employed
are just repeating the corporate-motto.

> I believe Microsoft is the ideal partner for GitHub, and as a
> developer who loves GitHub, leading its next chapter will
> be an incredibly exciting opportunity and responsibility.

Yeah we get it.

The +7 billion totally was no reason. Microsoft is the ideal
partner. Microsoft is love. Microsoft is life.

They could have tossed a penny and it would have had
the same outcome. Good that they tossed +7 billion.

> Just as open source helped launch my career, millions
> of people today depend on GitHub

AHA AND HOW MUCH MONEY DO YOU RE-INVEST
DIRECTLY TO THESE DEVELOPERS?

I am sure many want to know that. After all you guys talk
a lot about how everything will become better, yet I have
not yet heard about your specific plans to invest that
money into developers.

Note - of course you are not obliged to do so. I am only
looking at the interesting PR about how everything will
become better and AIDS cured in one go.

> Im determined to give that opportunity to millions
> more around the world.

Ok ok we get it ... so now:

- How much of the +7 billion will you guys re-""invest""
directly into ""human resources"", aka human beings?
Or just pocketing it all away and thus giving credit to
all those who said you were only in for the money and
all the fanfare afterwards is just for PR show?

> At the same time, I understand that there is some healthy
> skepticism in the community, so I wanted to be absolutely
> clear about two things:

>     GitHub will operate independently as a community, platform, and business. 

LOL. :)

I mean ... if you guys were independent ... the +7 billion had no role
in it right? Could have been 15 billion. Or 0.001 billion. All the
same.

You are not influenced AT ALL by Microsoft right? I mean it's not
as if they own github? Can you be fired by the way and replaced
by someone else? Steve Ballmer, anyone? Well.

> GitHub will retain its developer-first values

Ya ya ya... as shown by how much you had an interest in asking
what the developers wanted to have or had to say about your
decision. Oh wait, you were not interested. And, fair enough, 
you can do whatever you want to of course - it's your company
(as in, those who own it of course). But don't make it sound as if
you care about developers when you evidently don't. By the way,
how much of the money are you going to invest into developers
directly? And can we verify this, too?

> GitHub will retain its product philosophy

There once was a company that had a motto to ""don't do evil"".

Then they started to collect as much data as possible about
everyone - and ended up optimizing algorithms for drone
murders to be executed.

Well, guess which company this has been...",2018-06-04 19:34:51
183,"The only thing in that list they have going for them is VSCode and Typescript. The rest, like Xamarin is just shoved in your face when all you want is Visual Studio. Look closer at the numbers and community contributions, they are on the lower end of adoption. Someone tried to argue .net core momentum by linking GitHub a year ago and all they had were a few people committing anything. Their integration of Linux is just cheap. Then they can just put .Net core Linux apps all over the place and here comes the old yet gold licensing model on MS Linux distros. Aka shoehorning.",2018-06-04 19:37:50
184,"Mojang is the company behind Minecraft. Owned by Microsoft for 4+ years and still selling like crazy. Not a failure.

In what sense is Xamarin a failure? More developers have moved towards it since Microsoft bought it and _open sourced_ the project.

Why does it have to have synergy? The point is they bought it, and afaik it hasn't crashed and burned. Companies and clients around the world are still using it. In fact, isn't the fact you didn't know they owned it even better? It's possible they buy GitHub and don't ""Skype"" it and 5 years from now new GitHub users don't even know it's owned by MS",2018-06-04 19:39:28
185,"Also, Skype was acquired in 2011, whereas Satya Nadella took over in 2014. Its not even the same Microsoft, so Skype really isnt a good example. Xamarin and LinkedIn would be better examples to look at.",2018-06-04 19:39:50
186,I'm quite sure that Xamarin knew months in advance that they would be acquired.,2018-06-04 19:41:45
187,"A Microsoft faz parte da LinuxFoundation ha 2 anos ja. Ela participa de um monte de projetos open source, inclusive no proprio GitHub.

> From cloud computing and networking to gaming, Microsoft has steadily increased its engagement in open source projects and communities. The company is currently a leading open source contributor on GitHub and earlier this year announced several milestones that indicate the scope of its commitment to open source development. The company released the open source .NET Core 1.0; partnered with Canonical to bring Ubuntu to Windows 10; worked with FreeBSD to release an image for Azure; and after acquiring Xamarin, Microsoft open sourced its software development kit. In addition, Microsoft works with companies like Red Hat, SUSE and others to support their solutions in its products.

",2018-06-04 19:49:45
188,"Xamarin. It was born as an abomination already, but instead of letting it slowly die, Microsoft decided to buy it, extend its life substantially, and on top of that make Xamarin.Forms happen.",2018-06-04 19:53:38
189,"Hey man I hear you there.
I'm not a big Javascript framework fan myself (python + jinja + flask myself). Xamarins pretty well suited right now as well. I just can't drink the Microsoft Koolaid too much at once...",2018-06-04 20:00:23
190,"But ""slowly begginning to overtake"" is an assumption on the minecraft world.

Nokia **was** about to die, they tried to put it up again but they couldn't. And, they didn't died because the Windows Phone wasn't good at all, they died because there wasn't communities of developers dedicated on building good apps for it, just like Android and Apple had. They even made Xamarin for cross\-plataform app development that covered Android, iOS and Windows Phone.

And the examples on the Wikipedia aren't talking about nothing more than the Browser Wars, that we all know that Microsoft have lost it in all possible ways and they don't even try to compete with the Major browsers nowdays.",2018-06-04 20:19:53
191,"General question related to Xamarin Android (I know most if not all people here uses Android Studio) or just the development process. I'm reading documentation about RecyclerViews and I notice it talk about the LayoutManager, Adapters and ViewHolders. My question is, does the RecyclerView automatically implement MVVM? Or do I need something external like MVVM light to implement an MVVM structure.",2018-06-04 20:23:50
192,"They put the founder of Xamarin as the CEO, he's not exactly new to open source ecosystem. ",2018-06-04 20:25:17
193,"I don't know what Xamarin was like on Mac before they bought it but Visual Studio for Mac sucks balls. In fact, it's so broken it drive me to spend money and buy Rider.",2018-06-04 20:45:48
194,"People who think this will not affect Github negatively down the line **because of the Miicrosoft contributors** are seriously mistaken. Those who will be making the decisions for the direction of GitHub will be the stockholders, not those project managers and engineers who contributed to Github open source projects.

**However,** Github has great competitors and many projects can easily migrate to them, so Microsoft will not be doing something stupid to immediately screw over the open source community. If anything, I actually expect to see some additional options to free users because Microsoft can easily afford it with their resources.

As long as Github has those competitors alive and running for the next 10 years, the open source community will not be controlled by Microsoft's corporate interest. It's not like Reddit where we don't have an immediate, viable migration point.

I can definitely see Github going south, but only if they reach a point of monopoly. This likely is a move to offer a complete package for software developers from start to finish (planning, coding, source control and deployment) without relying on any third party solutions.

Remember when Microsoft acquired Xamarin. They made the runtime open source and integrated it into Visual Studio for free.",2018-06-04 21:01:57
195,"Ma allora diciamo anche che Microsoft  il primo contributor di progetti su GitHub, che ha creato VS Code \(open source\), che ha reso .NET open source e cross platform, che ha creato TypeScript, che ha comprato Xamarin e HockeyApp e ha reso entrambi completamente gratuiti. Stiamo parlando di Microsoft nel 2018, non nel 2010",2018-06-04 21:05:25
196,Minecraft and Xamarin. Probably others.,2018-06-04 21:11:37
197,"For the sake of argument, you can run your favorite Linux distro, use Microsoft developed Visual Studio Code, Use Microsoft owned Github, Launch on Microsoft owned Azure, Target Apple device using Microsoft owned Xamarin, and never even have to think about Windows.

[This is why Windows was moved to the backburner](http://fortune.com/2018/03/29/microsoft-reorganization-terry-myerson/).",2018-06-04 21:17:48
198,"They bought and open-sourced Xamarin. 

Something I learned a long time ago is that if I don't actually know what I'm talking about, I should probably just keep my opnions on the subject to myself. ",2018-06-04 21:23:43
199,"They made Xamarin free immediately after they purchased it. It's been steadily worked on ever since. They are still updating Minecraft, both the original Java version as well as the Windows 10/Xbox/mobile versions.

I'm assuming both of these are more of less operating as autonomous entities away from Microsoft.",2018-06-04 21:26:37
200,Like they did with Xamarin or LinkedIn?,2018-06-04 21:30:51
201,"Xamarin is on the lower end of adoption??

Seems to me like its getting more popular by the year. Experienced Xamarin developers round me are in very high demand. Seems every tech company with some mobile presence is becoming a Xamarin developer.",2018-06-04 21:31:17
202,"I think Monodevelop morphed into Xamarin Studio but is now also discontinued in favor for Visual Studio Community.

But I think your issue isn't the IDE but the feature set. Unity now also supports .NET Standard 2.0 in Version 2018.1. This means you have access to a ton of new libraries you couldn't use before. Maybe your company could loon into upgrading to the newest version?",2018-06-04 21:50:40
203,"The reaction this community is having is both unsurprising and seriously disappointing.

Its like people just ignore things like VS, Xamarin, Azure, Team services, Exchange etc etc and just Yeah but Skype. Moving to GitLab right now",2018-06-04 21:52:33
204,"Xamarin wasn't a site that's going to compete with the site they just bought, though, minus the existing content.

Microsoft *didn't* open-source *Minecraft* after they bought it for $2.5B.
",2018-06-04 21:55:18
205,"I don't get what he's trying to say.

Xamarin acquired RoboVM back when Xamarin was its own entity.  Xamarin was later acquired by 
Microsoft.  Microsoft acquired Xamarin to give them a better foothold in the mobile market.  Microsoft decided that they weren't interested in the RoboVM product they acquired via the Xamarin acquisition and discontinued it.

The idea of acquiring a company for a subset of its products/services and then selling off or discontinuing the other products/services it offers has existed for as long as merger and acquisitions have existed. 

That's a far stretch from the assertion that Microsoft bought RoboVM to kill it and force people to use their solution. ",2018-06-04 21:57:41
206,Currently using Xamarin to write a Flutter app that uses React. Hopefully I'll never again write a line of code that directly does anything.,2018-06-04 22:13:03
207,"Skype isnt a developer product. Their Xamarin acquisition was damn near flawless, and they even removed many of the licensing fees",2018-06-04 22:42:38
208,"Sounds like something that you'd probably want to have on a phone, no?  So since you're new, look up stuff for Android, or iPhone, whichever you have so you can test it on your phone.  And look up stuff for development for that.  Each one of those have different paths....java, kotlin, flutter, xamarin for android, or swift, flutter, xamarin for iOS.  Investigate what each one is/does, and then see if there are any videos out there.",2018-06-04 22:46:22
209,"I was commissioned to make an app using Xamarin a fair few months after Xamarin.Forms come out. 

The development goal was to deploy to multiple devices and share a common codebase if possible.

What i went though in the next 3 months was one of the most stress inducing things i have been through.

One day i had finished a build and needed to give a working demonstration to a company CEO on IOS, i tested building the project many times because of how fiddly it had behaved, but for the life of me i could not get the build process to work this time.

I wanted to scream because i knew i had already tested it working but i was getting a very long and obtuse Xamarin error. After bashing away for a while i randomly decided to clean the project in VS and now it was building perfectly. Tested in the emulator.

I had to connect the apple computer to the network, started visual studio on my windows machine and get the Xamarin plugin to detect the apple device.

After about half an hour i bugged it into working by disconnecting and reconnecting devices, and then started the build process. What happens is a special build file is supposed to appear in a folder on the apple computer after compilation.

Because i was so stressed i was still in debug mode, which produces a different build file. I start again in release mode.

Finally get the app to build for release, get the file i needed and then deploy it to the apple testflight.

After mucking about with apple testflight for another half an hour waiting for my build to appear and dealing with upload errors i was able to get the app onto a device.

We finally reached the point where the app could be shown on a device for this impromptu presentation  and on launching the app it closes immediately.

The presentation was canceled because it just ended up with the CEO standing there not getting to see anything.

After reading more into what happened after, the app was crashing because apple had just added the requirement for a description for one of the features we were using and without the meta data of that description the app immediately crashes.",2018-06-04 23:06:21
210,"I do mobile development.

Xamarin is what you use when your requirements (and the talents of your developers) are modest.

Serious mobile apps are always native.  I'm not saying it has no place.  For a certain captive audience kind of in-house app it can make sense.  As much sense as using Cordova or React Native.  But it will look crappy next to a properly written native app.

Xamarin being open sourced means nothing.  The other cross platform native kits are also open source.  They also produce LCD apps.

Didn't know that about Minecraft.  My kids were heavy into it - one hacked our router and hosted her own server for her friends.  But they've outgrown it and I didn't know it was still a thing (or that MS had bought it).
",2018-06-04 23:31:01
211,"Xamarin is a product.  GitHub is a service.

As a software product, Xamarin's only significant cost was developer salary.  Being open-source brought huge network effects, allowing them to push one of their own products into new markets.  Microsoft was by far the biggest source for .NET, and Xamarin was probably #2, so open-sourcing it helped them more than anyone else in the world.

Like all services, GitHub has significant recurring costs simply to run.  Open-sourcing it would not bring any significant benefits to other Microsoft products or services.  GitHub is already losing money, and open-sourcing it would open them up to all kinds of new competition and not help them recoup costs in any way.  Microsoft isn't unique in providing cloud services, so open-sourcing GitHub would erode the benefit of the biggest single asset they acquired from this purchase.

Open-sourcing GitHub today makes no sense.  That doesn't mean Microsoft won't do it, but it does mean it would be a very unusual move for them, with no apparent market justification. I'm not sure what leg you have to stand on to call people who disagree with you ""clueless"".",2018-06-04 23:52:00
212,"Do you know if they just bought it, but let Xamarin do whatever; or is MS instilling it's software standards into it?",2018-06-04 23:56:09
213,Im not sure this is a good way to utilize the shared library or even the Xamarin framework itself .,2018-06-05 00:11:48
214,"More likely, it will get cheaper or completely free (for private users). After they acquired Xamarin, they made it completely free (was pretty expensive before).",2018-06-05 00:24:33
215,"no one else said it so someone has to:

Xamarin is a piece of shit",2018-06-05 00:39:03
216,"Microsoft tried to compete with github using codeplex and it wasn't great. Microsoft recognized that and moved their stuff onto github. Buying github so that they can continue to use it to host their own projects without threat of a competitor makes perfect sense. Especially under the same dudes who run Xamarin, whom by the way was created by the guy who made Gnome and is now responsible for the .net foundation.",2018-06-05 00:46:56
217,I think you should try to make a plugin for Xamarin where the plugin exposes public methods to those helper methods you created https://docs.microsoft.com/en-us/nuget/guides/create-packages-for-xamarin,2018-06-05 00:48:36
218,"Regardless of your personal subjective opinion on Xamarin as a product, if you look at what happened with it since the acquisition, there's no way to look at it that would make Msft look bad. Not only did the quality of the product increase significantly since the acquisition (msft has been really active at fixing bugs), but Msft made the product free (included in VS community edition) when it was previously ridiculously expensive (at least for most indy developper), and then went even further and open sourced it.",2018-06-05 00:49:06
219,"I respect that you understand the potential dangers caused by microsoft, I think you're ignoring the past 5 years.

Microsoft has open sourced a few products \(.net, powershell, chakracore\). Bought the company responsible for Mono and practically turned it into a nonprofit foundation \(and introduced Xamarin to MAC under the visual studio banner\)

I think Microsoft doesn't want to kill open source, rather they want to get it hosted on their cloud because that's what enterprise will pay for. Open Source is what enterprise is demanding right now because they basically get all the software for free and just pay for hosting. They have all the lego blocks but need companies willing to put those blocks on display when they're done building with them. Why compete with lego when you can get money from the lego builders to store their stuff.",2018-06-05 01:02:22
220,And xamarin. But nobody liked xamarin anyways. ,2018-06-05 01:19:03
221,"yes, true, MS acquisition was a good thing for Xamarin, but Xamarin is still the worst programming experience I have ever had haha",2018-06-05 01:24:48
222,I am guessing you haven't worked with xamarin before. That poor devs life must be a living hell,2018-06-05 01:28:39
223,Agreed. Everything theyve done with Xamarin has legitimately shocked me and earned a lot of trust back. ,2018-06-05 01:33:53
224,"I mean, theyve been pretty active in getting Linux distros working under Hyper-V. And theyve been pretty serious about making .NET Core work on Linux. And on top of always supporting Xamarin, theyve done a pretty good job of supporting them post acquisition so far.

People like to shit all over Microsofts open source efforts, but its really no different than anytime Googles web standards involvement or Intels server platform support. The smart people realized decades ago that the easiest way to fuck over your competitors isnt to make a proprietary solution - its to help develop a legitimate, well resourced open solution that competes with your competitors - then leverage it for your own proprietary products.",2018-06-05 01:39:23
225,"From what I've read, I assume you're looking for a visual UI designer with drag and drop like functionality of Win Forms . I think you'd be hard pressed to find something like that. You'll have to code your UI with something like Avalonia or Eto Forms. Not really sure , but thats where I'd investigate first. 
Miguel from Xamarin wrote a cool cross platform terminal UI framework if you want something simple.
Apparently there are unoffical ways to setup Xamarin on Linux.
You will probably have to rely on compiling with command line.",2018-06-05 02:28:34
226,Same thing with Xamarin projects  Anyone?,2018-06-05 02:32:44
227,I seem to recall Xamarin is doing pretty well.,2018-06-05 02:34:05
228,"I just wanted to chime in and say I agree, xamarin was the worst choice I've made, so much regret. That said, Microsoft didn't make it worse, not that it could have been worse...",2018-06-05 03:09:35
229,http://donthitsave.com/comic/2016/02/26/xamarin-brought-to-you-by-microsoft,2018-06-05 03:42:50
230,"VS Code and .NET didn't exist in the 90s. VS Code didn't exist until 2015 and was completely free and open source since its inception.

Though, it will be interesting to see what happens to Github's own editor Atom, which competes directly with VS Code. Its open source as well so Microsoft couldn't shut it down even if they wanted, but they might just stop contributing to it.

.NET was created to compete with Java, and while it carved out a little space in the world it in no way even remotely close to killing Java. 

In the past .NET was a land of vendor lock in, but those days are gone with .NET Core being completely open source and happily running on linux or mac.

Funnily enough a lot of people in the past chose Java over .NET from concerns about Microsoft potentially doing bad stuff, but in reality Oracle ended up behaving much worse with Java and doing things like trying to sue Google for creating an implementation of Java's apis. Meanwhile, Microsoft actually embraced things like Mono and bought Xamarin to make it open source and free. ",2018-06-05 04:27:30
231,"Well, they certainly haven't mismanaged LinkedIn or Xamarin into the ground, so I guess you could argue the other way as well. Microsoft acquired those companies and has stayed hands off letting them largely do their own thing.",2018-06-05 04:38:32
232,"One aspect a lot of people are overlooking is Github also own Electron.. Github and Electron combined have huge influence in promoting truly free open source cross platform software.  It makes complete sense for Microsoft to gain control over these two entities.  Unfortunately I don't think its going to be for the better of end users/developers in the long run.

Whats also interesting is they are putting Xamarin CEO Nat Friedman in charge of Github, before Microsoft purchased Xamarin the open source community had created some great cross platform projects like mono, mono-develop and Xamarin itself was a great tool even if commercial.  Since the purchase of Xamarin, i've found those projects no longer stable platforms..  Party due to Microsoft bringing them under their wing and integrating with their own tools, but also in part to instability due to so many radical changes going on.",2018-06-05 05:27:13
233,"Now make clear which of those projects originated from inside MS (not xamarin) and then list all the MS products that are NOT open source, there are many.  

",2018-06-05 05:45:53
234,">. It's just a rebranded Xamarin Studio.

yep and its utter garbage. luckily Rider exists and its almost as good as Visual studio imo.",2018-06-05 06:00:54
235,"> Hold your horses, stop clicking on delete account and definitely
> stop immediately migrating to GitLab like everyone is doing.
> Stay with me.

Another promo-blogger.

They are breeding like rabbits.

""Everything will be ok, daddy. Just take the pill.""

> Let me start from the beginning. Github is hackers paradise

Oh yes, the old one:

Github is love.

Github is life.

And the +7 billions have nothing to do with anything.
Yada yada yada ...

> kinda explains why it has problems with earning money

EXACTLY!

So it really needed 7 billion. Nothing less would do.

THANK GOD MICROSOFT JUST ACCIDENTALLY HAD
ENOUGH MONEY!

> costs a lot to sustain heaven on earth

Heaven on earth? What the ... ?

This is really getting out of control, those blind promos.

> You can find almost everything there, from machine learning

Yes - before the Microsoft take over.

I doubt many want to become a MS front end.

We did not sign up for this 10 years ago either.

> Even if you are not a programmer, you should
> care because most of the websites or apps you
> are running are using one of the libraries hosted on Github.

Why isn't he addressing the real issue?

> The company became home for 28 million developers
> and 85 million repositories over the years

Yes, they keep on repeating the number. Numbers are like
magic.

> If that doesn't sound convincing how about 7.5B dollars
> deal that Microsoft paid for this one. 

And that is good ... why again? How?

I don't get it. People should think that this is good?

IF IT IS GOOD THEN WHY ARE THEY LEAVING
MS GITHUB?

> The internet doesn't like Microsoft that's old news.

Remember the 1990s? That is when both the USA and
the EU (well, EU member states) brought MS to court.
And MS had to pay huge fines and agree stopping
various malpractices. Why does he not mention this?
Has he a short memory or is he paid by MS?

> When the information hit the internet, even I didn't
> believe how harsh programmers are. 

What is ""harsh"" there?

It has been explained over and over again.

Why should people affiliate with the take over?

That simply does not make any sense. So disentangling
from the new MS front end that is now github makes a 
whole lot of sense to me. I completely understand it.

I myself also closed my github account precisely because
I do not want to be affiliated with the take over in any way.
There simply was no reason to stay either - I could have
waited, but why? Waiting would have insinuated that I were
fine with the take over and I am not. I think it was an awful
decision - a decision where developers were not asked 
AT ALL. Github simply flipped the middle-finger to them -
and Microsoft was greedy and control-loving. I think it
was a huge mistake from both of them but it is moot to
discuss it since they decided - and assumed that people
will accept it. Yes, the majority will most likely accept it;
some can not abandon github, we know that. But there
also have been many who have not accepted it and
I think this is great.

It is irrelevant if they move away to other platforms or
not - the important part really is to simply not accept it
one way or another.

> Nokia in one of the worst possible moments(they
> quickly admitted it was an error on their part

Microsoft killing Nokia via their trojan horse was annoying
to no ends - but it has nothing to do with taking over 
github. It is not on the same level of comparing either.

> Fun fact, guess who is the biggest contributor to open
> source on Github.

And we should care ... why exactly?

Why would it matter how big Microsoft ""contributes"" TO
THEIR OWN CODE? Most of the ""open source"" code
Microsoft churns out REQUIRES WINDOWS AS PLATFORM.

Windows is proprietary. So again, how does this benefit
mankind exactly?

Microsoft is huge. So of course they churn out a lot of
code. So again - WHY is this relevant?

And, WHAT DOES THIS HAVE TO DO ANYTHING WITH
THE +7 BILLION BUY OUT?!?!?!

I don't understand the MS promoters like this guy.

> This is no longer Bill Gates or Steve Ballmer's Microsoft

I doubt this. But it also is not relevant.

Why would it matter who runs Microsoft? The acquisition is
awful no matter who runs Microsoft. It should not have 
happened. And it should not be accepted either. Developers
were not part of the decision making process. Github happily
flipped thei middle finger to them. So, again - why stay with
them after showing how much they ""care""?

> Microsoft is now supporting different flavors of Linux

The WSL is good. But, again - what does it have to do with
the acquisition? He is not bringing any real arguments to the
table. The +7 billion were done to ... improve mankind?

> has used open-source models on some significant cloud
> and developer products itself. 

Promotion.

> and I don't think they would ever again write ""Open Letter
> to Hobbyists"".

Oh, in some ways they wrote a letter to hobbyists saying:
""Here, we have +7 billion and now you are part of our
culture without having had any say in it HAHAHAHA"".

No thank you. I don't do drugs and I don't do so in this
case either. 

> You want another proof? Heard about Xamarin, 

Ozh god, he is bringing Miguel in, the old Microsoft fanboi
number #1 using Linux. Can't we stop using corporate
hackers as role models please?

> it was created for native cross-development of mobile
> apps in C#

Miguel is the ultimate BORG worker drone.

> I don't know why people over-idealize Github as
> a company without flaws. 

There is a huge difference between github pre-Microsoft
and the github owners wanting to cash out. Everyone
understands the WHY. It's their company too, they can do
whatever they want to. But they must stop claiming this
is done for the better of mankind, how developers will
super-benefit from it yada yada yada. It's just PR.

It benefits the github owners. You don't see a single dime
but you are suppoed to invest your unpaid time to make
the github people richer. No, thanks - I have nothing to
do with this shady move.

> Let's go so back couple years back, they had problems with sexism

HOW IS THIS RELEVANT TO THE SEVEN BILLION TAKE
OVER?!

And, hey - if I get +7 billion after sexism issues, I say that is great. Good
payout.

> they were all over the news with this scandal

Honely - nobody remembers the sexism issue and nobody cares.
But countless people WILL remember the epic exodus. :)

> 4 years from disgrace but looks like chaos is still there as they
> couldn't find new CEO from August last year.

Oh yes such a huge problem ... perhaps they did not want a new
CEO who might say no to the +7 billion take over.

We don't know. And github won't tell the truth anyway.

",2018-06-05 06:09:45
236,Xamarin has only gotten better.,2018-06-05 06:11:30
237,Ouais y'a qu' voir ce qu'ils ont fait avec Xamarin en le rendant libre et gratuit pour tout le monde. Quelle horreur.,2018-06-05 06:59:17
238,"Everyone forgetting that Microsoft open-sourced Xamarin post-acquisition?

",2018-06-05 09:03:29
239,"> I know about the xamarin project, but this guy don't look to be ""Active in Open Source"" as he claims.
> 
> 

Well Xamarin's main product is Mono which is open source and he has been in open source companies for a long time. ",2018-06-05 09:10:58
240,"Alors a aura peut\-tre des avantages, je dis pas.  


Mais je prfre dj migrer tout mes projets sur un autre site pour le moment hein. S'pas parce qu'ils ont fait Xamarin qu'ils font des choses toujours cools.",2018-06-05 09:26:06
241,"They're run a by very different group of people and the market's changed so much that their old ways wouldn't likely be all that profitable anyways.

I'm hoping they open source GitHub - it's not implausible, they did it with Xamarin.",2018-06-05 09:33:24
242,"What have they done so far? They haven't ruined LinkedIn, Xamarin, Swiftkey, or Mojang \(recent acquisitions\)",2018-06-05 10:46:20
243,"> IMO, it is the second biggest advance in app development in the last decade
 
how so? It just adds type safety. You could just use .net xamarin if youre after that. IMO the real innovations are stuff like react native if you ask me. (Of course typescript is a lot funner to work with than xamarin but you get the point).

",2018-06-05 11:23:33
244,"I used Xamarin before they were bought by MS.  It was great.

You're now forced to use visual studio and the MS tool suite to use Xamarin. You pretty much need to sign up and get with the MS program to use Xamarin for 'free'",2018-06-05 11:41:41
245,"I guess it's a technically not a VM but there are resources out there that will let you legally build on a mac for a fee, I think Xamarin has a product that does this?",2018-06-05 11:57:30
246,"For some reason I thought that VS Code was a rebranding of Xamarin, having never used Xamarin.",2018-06-05 12:33:35
247,"Think of Xamarin: Was pretty expensive before Microsofts acquisition, now it's  completely free. I guess it's gonna be the same case with GitHub.",2018-06-05 13:09:29
248,I wouldn't say they ruined all the products they acquired. They seem to have done quite well with Xamarin.,2018-06-05 14:01:29
249,"MonoDevelop was the foundation of Xamarin Studio. When Xamarin was acquired, it became Visual Studio for Mac. So the bits you see in https://github.com/mono/monodevelop is actually the basis for Visual Studio for Mac. ",2018-06-05 14:05:04
250,"MonoDevelop was the foundation of Xamarin Studio. When Xamarin was acquired by Microsoft, Xamarin Studio became Visual Studio for Mac. 

The bits you see in https://github.com/mono/monodevelop is actually the basis for Visual Studio for Mac which, as of now, is still using a lot of gtk apis.",2018-06-05 14:07:34
251,"Wasn't Xamarin already .NET before Microsoft even got on board?

If you've already sold your soul to .NET, you can't go much further down.",2018-06-05 14:13:35
252,"Yes, panic-driven, knee-jerk reactions are always the most reasonable course. 

Let's look to the most recent and related (e.g. developer centric) major Microsoft aquisition for our predictions then, shall we?

That'd be Xamarin, which has only gotten better. Microsoft hasn't make it windows only, they haven't used at as a platform to try to kill Mono, they haven't done any of the evil things that the fearmongers will have you believe.",2018-06-05 14:15:02
253,"> The only thing in that list they have going for them is VSCode and Typescript.

Just because you only care about a select few of their products/offerings doesn't mean that they don't contribute to OSS.

> The rest, like Xamarin is just shoved in your face when all you want is Visual Studio.

Companies routinely shove their products in your face, especially if they work well together. As for Xamarin, go to VS's website. Xamarin is NOT being shoved in your face.

> Look closer at the numbers and community contributions, they are on the lower end of adoption.

VS Code is a very well known product with a decent user base. As is TypeScript. .NET Core is that MS is pushing as the future of .NET and will continue to grow there. Xamarin doesn't seem to be slowing down anytime soon. 

> Their integration of Linux is just cheap.

I too wish that they were more Linux focused. But as a starting point, I'm happy to have .NET Core.

> Then they can just put .Net core Linux apps all over the place and here comes the old yet gold licensing model on MS Linux distros.

One of their main focuses is Azure. If you use their products on Azure they consider that a victory. 

If you are so much against MS buying Github, who would you have as an alternative? Amazon? How much open source contributions do they provide? Oracle? Every dev on the planet would leave in a week. ",2018-06-05 14:35:12
254,"Ah, yes on macOS Xamarin Studio was rebranded to Visual Studio for Mac. The Windows version was deprecated in favor of regular Visual Studio.",2018-06-05 14:35:36
255,"It's not panic driven. You're spinning it as something that it isn't. The ""evil things"" Microsoft have done are not some kind of conspiracy. Everyone knows what they have done and what they stand for. Their shitty OS called windows is a good example.

I don't care about Xamarin. Never used it and never will since Microsoft are in charge of it. ",2018-06-05 14:38:16
256,"People keep bringing up Skype & Nokia, but fail to realize that those acquisitions happened under the previous CEO, Steve Balmer. Thus far, the acquisitions under the current CEO, Satya Nadella have done well \-\-\- LinkedIn, Xamarin, Mojang \(Minecraft\), & Beam \(now Mixer\).

Side note, in reality Nokia was ruined long before Microsoft purchased their hardware& devices division, Microsoft funded a lot of what they did prior...which is why they only developed Windows Phones BEFORE they purchase.",2018-06-05 14:38:25
257,"\> I think Xamarin has a product that does this? 

Their Visual Studio plugin still requires a mac to build for iOS / debug code in emulator. I've used MacInCloud for building a personal project but it doesn't look enterprise\-ready.",2018-06-05 14:56:41
258,"Lol, nice justification.

Xamarin was .NET yes, and it was prohibitively expensive.

Microsoft bought it, made it free, and improved it immensely. ",2018-06-05 15:13:54
259,"They won't. Their currents TFSVC or TFSGIT are mostly free, they bought xamarin and made it free. They are doing this only to aquire the largest pile of shit code in the world.",2018-06-05 15:23:00
260,"Don't even bother trying to reason with the morons in these subreddits. It's like r/PCMasterRace, but instead of jerking Valve's cock and hating on Apple products they focus their hate on large corporations known for their proprietary software. These guys justify their Microsoft hate based on the downfall of Skype and the abomination that is Windows 10.

I'm not saying that Microsoft couldn't or wouldn't ruin Github. I'm just annoyed that these hobbyist programmers with their dotfiles hosted on Github lost their shit the moment Microsoft purchased it. Cheese guys, just wait and see. It's not like Xamarin got completely ruined when Microsoft bought it. Instead we got a ton of improvements on the editor for Mac. Net Core is cool. Microsoft also bought Hockeyapp and the new service their replacing it with is decent.

Now take a look at all the hatred against Microsoft around here. Done? Good. Now tey creating a new thread about text editors and see what's the most popular one. Now, is it full of advertisements and does it keep stealing all of your data?",2018-06-05 15:37:58
261,">Not like patterns are a thing that are incredibly common in our world or anything...

Which is why I gave perfectly good examples of Microsoft acquisitions they have not ruined, but actually improved. I'd argue that the acquisition of Github is way closer to the acquisition of HockeyApp or Xamarin than the acquisition of Skype.",2018-06-05 15:55:07
262,"Also Xamarin, they bought it and made it open source shortly after",2018-06-05 16:05:53
263,"No one would argue this was done for good will. Quite frankly anyone who would is delusional. Microsoft obviously planned for this to be profitable, but the point is that's not a bad thing as long as it's not at the expense of the developer community. 
This is not necessarily bad for GitHub either. Microsoft's recent history with acquisitions has gone good(Xamarin), bad(Nokia), and not that different either way(Mojang, LinkedIn). 
Objectively speaking, in the Satya era there have been lots of positive interactions with the OSS community, things which were unheard of before him. 
Even with Microsoft's history, surely they've at least earned the benefit of a doubt. I would say let's not label this as good or bad and simply wait and see. It will never be too late for anyone who wants to jump ship from GitHub to do so. But at least don't do so before you think it's a sinking ship. 

",2018-06-05 16:09:59
264,"When Microsoft purchased xamarin, they gave away a lot of services that xamarin was previously charging for",2018-06-05 16:48:47
265,.NET Core (2.x - not that 1.x bullshit) and Azure as well. Plus they made Xamarin open source after they purchased them.,2018-06-05 17:02:17
266,"**Mono (software)**

Mono is a free and open-source project led by Xamarin, a subsidiary of Microsoft (formerly by Novell and originally by Ximian), and the .NET Foundation, to create an Ecma standard-compliant, .NET Framework-compatible set of tools including, among others, a C# compiler and a Common Language Runtime. The logo of Mono is a stylized monkey's face, mono being Spanish for monkey.

The stated purpose of Mono is not only to be able to run Microsoft .NET applications cross-platform, but also to bring better development tools to Linux developers. Mono can be run on many software systems including Android, most Linux distributions, BSD, macOS, Windows, Solaris, and even some game consoles such as PlayStation 3, Wii, and Xbox 360.

***

^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&message=Excludeme&subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ProgrammerHumor/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]
^Downvote ^to ^remove ^| ^v0.28",2018-06-05 17:18:03
267,Xamarin and .Net Core don't exist I see...,2018-06-05 17:19:07
268,"Don't know why all the hate to Microsoft, they have been doing a great job the last couple of years, even in the companies they acquire like Xamarin and LinkedIn.",2018-06-05 17:24:51
269,">When Microsoft purchased xamarin, they gave away a lot of services that xamarin was previously charging for

That's good. Maybe we will get a limited number of private repositories for free. With the whole #movetogitlab mess, Microsoft will have to give developers something good if they want them to stay there. 

That being said, it's so sad that the programming community is being split. It was nice having a single place where you could find all open source projects and everybody agreed on. 

Programming subreddits will now be full of ""Github vs Gitlab""  posts till the end of time . Personally,  I just want one company to win over the community, I don't care who. ",2018-06-05 17:38:50
270,"https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/

> Under the terms of the agreement, Microsoft will acquire GitHub for $7.5 billion in Microsoft stock. Subject to customary closing conditions and completion of regulatory review, the acquisition is expected to close by the end of the calendar year.

> GitHub will retain its developer-first ethos and will operate independently to provide an open platform for all developers in all industries. Developers will continue to be able to use the programming languages, tools and operating systems of their choice for their projects  and will still be able to deploy their code to any operating system, any cloud and any device.

> Microsoft Corporate Vice President Nat Friedman, founder of Xamarin and an open source veteran, will assume the role of GitHub CEO. GitHubs current CEO, Chris Wanstrath, will become a Microsoft technical fellow, reporting to Executive Vice President Scott Guthrie, to work on strategic software initiatives.",2018-06-05 17:40:26
271,"This is pretty basic strategy by MS. If you own the tools, you get to prioritize making integrations with your services easier. The decision-makers for enterprise cloud hosting are highly technical. They will advocate for using the platform that their team can execute on, and integrates best with their tools. By owning GH (and Electron) as well as Xamarin, MS gets 1) incredibly valuable mindshare and 2) preferential integration with MS cloud services. 

It's brilliant and developer-friendly. It's a shot across the bow at AWS and Google (neither of whom are known as particularly awesome at dev relations, though both are trying to get better at it).",2018-06-05 17:51:00
272,">Except that the purchase was finalized just over four years ago, under Nadella, and doesn't change the fact that Nadella spent the past four years dismantling the acquisition to ensure it was a disaster

The Nokia deal was Ballmers last act which is well covered in the media. Everybody can see that Nokia wasn't going anywhere with Windows Phone so I'm not sure what you would have him do differently. 

> It's not like they have made a bunch of great purchases of that caliber since.

LinkedIn and Mojang are two major ones. Skype wasn't under Nadella, but is making massive headway into enterprise. Xamarin seems to be doing well too.

Beyond Nokia, which recent one under Nadella has gone badly?",2018-06-05 17:58:10
273,"Can't speak for OP, but subjectively, my opinion of Google has been steadily worsening over the last few years, while Microsoft has been earning steadily more respect.

Google's been doing more and more shady things recently, from YouTube's exceedingly opaque and seemingly-hostile [demonitization](https://www.forbes.com/sites/erikkain/2017/09/18/adpocalypse-2017-heres-what-you-need-to-know-about-youtubes-demonetization-troubles/#281055a36c26) that is hurting the creators there, to Google's [collaboration with the U.S. military on drone AI](https://www.theguardian.com/technology/2018/mar/07/google-ai-us-department-of-defense-military-drone-project-maven-tensorflow). There was also a patent application some time ago from one of Google's business units (can't find a link now, sorry) that would have routed all traffic from the .blog TLD directly to their Blogger servers, essentially giving them an advantage that would have violated net neutrality. And that's not to mention their seemingly-arbitrary and tone deaf dabbling in political topics such as [blanket-banning all Google Shopping results which contain the words ""gun"" ""pistol"" or ""rifle""](http://www.businessinsider.com/google-shopping-bans-gun-searches-water-guns-guns-n-roses-2018-2).

Conversely, Microsoft has [become the #1 open source contributor on Github](http://www.businessinsider.com/microsoft-github-open-source-2016-9), and is creating and pushing technologies that range from being completely open source, to encouraging cross-platform development such as [offering Xamarin for free](http://www.businessinsider.com/microsoft-acquires-xamarin-2016-2). They've released a free Community version of their flagship Visual Studio IDE, and are heavily pushing cross-platform .NET Core adoption. Not to mention creating and [heavily backing the open-source development of Typescript](https://github.com/Microsoft/TypeScript) which is an excellent step forward in the JS ecosystem. They really seem to have embraced the idea that the walled-garden business model is not a good one, and that you can attract more people to your garden by simply making it the _best_ garden - then they won't want to leave, even though they could.

So... for the forseeable future I definitely feel better with GitHub in MS hands than Google. Although if Nadella were to step down and be replaced by another Ballmer, that could change... and on a long enough timeline certainly will. He's gotta retire, be replaced, or die eventually. Such is the problem with tech corporations. But since we can only make decisions with the facts we have in front of us, if I have to bet on a big tech corporation, my money's on Microsoft. For now.",2018-06-05 18:09:37
274,"I don't think they've destroyed Minecraft, Xamarin, or LinkedIn, and Skype has always sucked.",2018-06-05 19:00:29
275,"There aren't many to look at under Nadella. We've only got about three, which you mentioned. I don't know how you judge Xamarin, especially since part of the thought was that Xamarin's acquisition would help make UWP adoption easier and more frequent, which it doesn't seem to have done.

As for where Nokia was going, that was Microsoft's doing. Nokia made good progress with Windows Phone for the 900, 920, and 1020. Microsoft proceeded to spin its wheels, and when they bought Nokia about 18 months after the 920, they made an immediate mess of things. They didn't give the 920 a successor on AT&T (the bill of the U.S. market) for three years, and they marked the device way up.

Microsoft made a right mess of Nokia when they didn't have to. It seems like Ballmer wanted to push on Windows Phone, while Nadella came in with an intent on never letting that work. It wasn't a smashing success, but it was improving and growing until Nadella got involved. It basically looked like Nokia was dismantled from the second the ink dried on that deal. Nokia was relatively successful and Microsoft forced it to stop.",2018-06-05 19:24:10
276,"I'm not sure if his old stuff is still up, these days he's an executive, but he's built several companies (including Xamarin) that has open source as a core tenet of their business.",2018-06-05 20:30:16
277,"We currently have apps for iOS and Android. We haven't moved our Android code base yet but iOS is purely Xamarin. I use the native instead of Xamarin Forms.

Pros: 

* One code base to rule them all (except front-end stuff)
* Wide variety of support for everything
* They did a great job of making all the android/iOS methods, constructors, etc. available through C#

Cons:

* Using native libraries can be a bit time consuming. You have to [build your connections between the libraries] (https://docs.microsoft.com/en-us/xamarin/ios/platform/native-interop) to be able to use them. Learning that is key if you want to have full access to everything native iOS developers have.
* Visual Studio can be a bit buggy, but I haven't had any issues in the past year
* Still need a mac to do iOS - you don't need to use the mac but have to have it on the same network and you have to do debugging connected to the mac's USB (though i hear that requirement is going away)

There is more but I need to get back to work, I'll edit this later.",2018-06-05 20:40:33
278,">Apple could say that every one of their devices runs macOS

Apple did say that when iOS was refactored. It was one of Steve Jobs' talking points. I also thought it was BS at the time.

UWP is different though. The Extension SDKs are not required to port an application to another device. They are only required if you want to offer an enhancement provided by a specific platform. If you've added the layout and you stick with UWP APIs, it is not complicated to add other layouts and assets to create an app which runs across those other devices. If you want to do something special using an Xbox controller for instance, you just query that the platform supports it and then write that code against Xinput. Now you have something which can leverage a controller on Xbox **and** Windows Desktop.

Centennial Apps are a nice bridge if you have an existing codebase written for Win32 already, and they bring with them the improved security features of UWP such as a siloed registry and private file space, but if you're building a new application from the ground up, UWP is a much better platform to compose with from the beginning. The API itself takes advantage of the event driven design of Windows apps and builds upon that by encouraging a strong abstraction between your business logic and your views. It makes your code instantly more portable to different platforms, including iOS and Android when combined with Xamarin, and it creates separation of intents. XAML islands bring some of that view separation, but UWP provides more out of the gate.",2018-06-05 20:44:44
279,"We are small company, doing automation stuff. Now we have 3 xamarin apps in production: terminal for taxi drivers of local taxi company, app for that taxi customers, and app for automated trucks weighing terminal where authorized users can do some specific stuff.

https://play.google.com/store/apps/details?id=com.teleavtomatika.android.as6client

https://play.google.com/store/apps/details?id=com.teleavtomatika.android.udachataxiclientapp",2018-06-05 20:48:10
280,"I enjoy the heck out of Xamarin. 
The last month and a half I helped work on an app for an event, where guests got a schedule, map of the building and the ability to chat with sponsors at the event. As well as for a bit a fun a chatbot. 
Worked with primarily a team of three (one on iOS ui, one on android and the last managing backend/APIs.)
All three of us enjoyed the experience and craving to do more.  
",2018-06-05 21:02:49
281,"Xamarin has some quirks to it that can be frustrating to a new developer, but generally are worth the pain over using what Google and Apple offer. For the most part those quirks are becoming less and less by the day. 

I currently have two apps built with Xamarin, with another built in Xamarin Forms soon to be released. There are also quite a few companies building apps in Xamarin, I've had interviews with some of the largest companies in the US (Charter, Navient) for Xamarin development. 

I think it would be well worth it to learn. Unlike Windows Phone, iOS and Android are going to continue to be around for at least the next 3 to 5 years minimum, so I don't think that is quite an apples to apples comparison. ",2018-06-05 21:15:35
282,"Yo no creo que vayan a tocar mucho de GitHub. Han puesto de CEO a Nat Friedman, que junto con Miguel de Icaza (GNOME) fund Xamarin y tiene muy buena pinta.

Respecto a GitLab soy muy cauto, me parece que eso explotar antes que el propio GitHub. Estn ofreciendo de manera gratuita ms servicios que GitHub. GitHub no los supo rentabilizar, cmo lo har GitLab? Adems GitLab ahora mismo est financiado por Google Ventures e Y Combinator. 

La compra de GitHub por Microsoft le da esa estabilidad econmica que siempre busc y GitLab no tiene ningn apoyo ms que los inversores de capital riesgo",2018-06-05 21:29:43
283,"Unity changed their IDE for OSX to be VS. If you even tried to get Monodevelop (which is available) it just gives you VS. And then they want to bundle Xamarin with it. Once that is declined they want to install it so unrelated things can work.

Windows has fake limiting built in to where you can only get 8-10 concurrent connections from remote machines to yours. If you want more you have to buy their expensive server edition in order for the limit to be removed.

I also prefer not to pay license fees to Microsoft when Im using Linux because they snuck their .Net Core license and software into Linux software over time with a new license.

Also, Xamarin documentation is confusing and support is limited. Their competitors run laps around it in terms of community support, updates, and pricing model.

But we can just revisit this in 5 years and see where it goes. Likely a slow, bloated, dying platform akin to LinkedIn and Skype.

As for alternatives, Beanstalk and GitLabs currently. In the future I imagine an ecosystem of nodes that anyone wanting to self host a git server could link into. 

The open source movement can not be harnessed by some tech giant. If Tesla had some breakthrough in battery tech that would take out much of the oil industry, you dont think a national security order would be slapped on it and it be shelved? How about patent trolls stifling innovation and progression? You open source the right controversial thing and you cant contain or control it.

You get enough of a community contributing to something together and no tech giant team can compete against it. Microsoft has tried and with their current CEO they are trying something different. It does not mean people will believe them, or come to trust them. For some may never will.",2018-06-05 21:35:32
284,Xamarin.Forms or Xamarin.native?,2018-06-05 22:05:59
285,"The .NET stack (whose future is - let's be real - in .NET Core & Xamarin) is extremely important for a number of their tools (Visual Studio, SQL stuff, ...) and is not insignificant for a number of Azure's offerings. 


And wast parts of the current .NET stack (C# design, all .NET languages (C#, F#, VB) compilers, .NET Core runtime, .NET Core BCL, the whole tooling) are developed in the open on Github. While their migration would be possible it would be _extremely_ paintful. It's not just moving the code, it's migrating the whole community, processes, ...
",2018-06-05 23:54:13
286,"If this follows the same pattern the Xamarin acquisition did, we'll probably see github open sourced within a year.",2018-06-06 02:14:47
287,"If you want to write it in purely native code, you have no choice but Java is the primary choice as that's what android apps are natively written in.

However you have options by using other tools to create android apps. You can use Phonegap/Cordova for html/css/javascript, React Native for JavaScript and C# with Xamarin. ",2018-06-06 02:29:41
288,"\>  Name one MS merger where the product/service has improved post\-merger and not stayed the same or gotten worse? 

Xamarin. Revolution Analytics.

Microsoft sucks at consumer products, but they're pretty decent with enterprise products.",2018-06-06 02:31:04
289,"**Miguel de Icaza**

Miguel de Icaza (born November 23, 1972) is a Mexican programmer, best known for starting the GNOME, Mono, and Xamarin projects.

***

**GNOME**

GNOME () is a desktop environment composed of free and open-source software that runs on Linux and most BSD derivatives.

GNOME was originally an acronym for GNU Network Object Model Environment, but the acronym was dropped because it no longer reflected the vision of the GNOME project.

GNOME is developed by The GNOME Project, part of the GNU Project. The GNOME Project is composed of both volunteers and paid contributors, the largest corporate contributor being Red Hat.

***

^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&message=Excludeme&subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/learnprogramming/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]
^Downvote ^to ^remove ^| ^v0.28",2018-06-06 03:32:30
290,"Sure it is. Its just typically (but not always, see Xamarin on iOS) JITC rather than AOTC.",2018-06-06 04:03:10
291,"We have 3 Xamarin.Forms apps in production, 2 enterprise and one in the app stores. One more app currently being rewritten from Java/Objective C to Xamarin.Forms and another greenfield Forms app. Two of them share code with WPF apps.

I've been doing Xamarin.Forms for about 4 years with just a bit of WPF and native Android in the year before that to compare it to, but I really like it.",2018-06-06 04:28:51
292,"It's not as simple as a distaste for Microsoft it's their track record of doing bad things to good tech that they acquire.

They took Skype and removed p2p, they took RoboVM(Java Xamarin competitor) and killed it.

",2018-06-06 06:01:11
293,"Those are ""clsssic"" consumer-facing businesses, very different from GitHub. Try Xamarin as an example.",2018-06-06 06:59:06
294,"Compared to e.g. MvvmCross on Xamarin.Android, it's freaking complicated.

Yes, Dagger2 allows a very fine-tuned control of resource management, however I think most of the apps don't make much use of it - at least all the open source projects I've seen used a single component without subcomponents, a single scope, et cetera.

In comparison, in MvvmCross, you register your dependencies using interfaces - you never actually reference the implementation, just the interface. It actually made working with code quite fun - we actually had to create a custom .Net swagger-codegen template for Refit (a Retrofit-like library for .Net) that generated:

 - The interface used by Refit, with all the annotations and the return type wrapped in `Response<>`
 - The interface used to generalize the implementation, without annotations and type wrapping
 - The implementation, which was also generated, and implemented the generic interface

The implementation already had dependencies injected (our `SettingsProvider`, for example, for the base URL of the client, so we could easily swap the server being used, or the HttpRequestHandler stack we built which included extra handlers for logging network messages, response status, extract information from the headers, etc.), it created the Refit client internally, and used that, plus some error handling to create simple `async` calls that returned the POCO from the REST API.

It could also do automatic pairing of interface and implementation, and automatic discovery based on LINQ queries - meaning you could name your stuff so that everything ends with `Service`, then make a simple call during the app start: 


    CreatableTypes()
                    .EndingWith(""Service"")
                    .AsInterfaces()
                    .RegisterAsLazySingleton();

What this does is building a list of creatable types (`CreatableTypes()` returns all types that 
have a constructor, and are not abstract or interface), filters out all but the ones that has the class name ending with ""Service"" (so `FooService` is on the list), finds the closest matching interfaces (`FooService` implements `IFooService`, name matches by convention, so `IFooService` is paired with `FooService`), then registers them as lazy singletons (so calling `Mvx.Resolve<IFooService>()` will always return the same `FooService` instance, but it is not initialized until it's first needed).

Of course you can manually register types too, in various ways: as singletons, as continuously recreated types (you wouldn't want the same HttpMessageHandler throughout the whole app, right?), lazy or on-start initialization, all the bells and whistles. Then these are injected using the constructor itself - basically every time `IFooService` is instantiated using `FooService`, and MvvmCross tries to fill up the constructor with types that are registered. 

Oh, it also registers all ViewModels that aren't abstract, and the views (Activities, ViewControllers, et cetera, depending on the platform). Here comes a hard limit - each ViewModel can only have a single Presentation (the view itself), otherwise this obviously fails.

Navigation is then implemented by moving between ViewModels, with parameters, even. The created view gets an instance of the ViewModel so binding etc. can be done.

I truly wish Dagger had a simplified mode that did not require devs wrapping their heads around Components and Modules and manual injection, whatnot... Plus it's extremely hard to generalize. I understand that Dagger uses pre-compiled boilerplate that makes this near impossible (say, having a generic BaseViewModel, which does the injection, and all derivatives of this BaseViewModel now don't have to do it themselves), and that using the same technique MvvmCross uses (reflection) wouldn't be optimal on native Android (Xamarin keeps the dependencies in separate assemblies that are imported at start, instead of having all compiled into a single big blob (or multiple blobs with multidex) - reflection on native Android would take a lot longer time and would be much more inefficient.

On Xamarin, due to this injection system, there's rarely a need for manual intervention. You have your repo of global types that are registered, and usually all your types that require injection are also registered, all the way up to the ViewModels - as such, constructor injection is automatically done during the creation of the/an instance, and you literally just sit back and enjoy it.

Whereas with Dagger, first you write the stuff you want injected, let it be a ListAdapter, a custom service for accessing say, SharedPreferences, or an Intent launcher, or an error dialog handler, then you need to write a module for it (basically register the type, and optionally, create the/an instance, or define the creation using a builder pattern), which you add to a component (that is pretty much equivalent to the Mvx class, but you need to manually put it together), and you add injection instructions to it (so that you can actually call a component from say, an Activity or a Fragment). It's just unnecessarily complicated. And it could be simplified (at the expense of losing some of the flexibility Dagger provides): since it already is generating boilerplate, why not have a separate annotation for an `InjectionTarget`, which would generate the appropriate Component(s), and during buildtime, would add the appropriate code to the target (e.g. the `DaggerWhatEverComponent.builder().whateverModule(input).build().inject(this)`). It's doable, and it would make things a LOT easier. Heck, it could even have Scope etc. parameters, so that multiple components are generated... I just don't see why this hasn't been implemented yet.",2018-06-06 07:59:26
295,"We use it extensively at my workplace, many projects deployed with it... but if I were you, anything with a bit more complex UI or some performance requirements, go native UI with Xamarin being used just for shared Core codebase.

Sadly, Xamarin.Forms is still pretty slow and can be pain in the ass when something goes wrong... and it usually does with more complex interfaces.

Xamarin as a whole is great, Xamarin.Forms I'd be more careful with, we got burned  a few times, but on simpler apps such as shop catalogues/showrooms it's fine as well.",2018-06-06 08:03:30
296,"For Windows, I'm planning to support mostly UWP https://github.com/mfkl/libvlc-nuget/issues/8 for now. Maybe WPF/WinForms later if there's demand, but the focus is on crossplaform support first. Use Vlc.DotNet if you absolutely need older UI toolkit support on Windows.
For Mac, Xamarin.Mac I guess. Packaging is ongoing.
For Linux, I was thinking GTK as that's what Xamarin.Forms currently supports and the GTK# binding is somewhat popular. Note that the official VLC desktop app uses Qt.",2018-06-06 09:41:00
297,No you can try visual studio with Xamarin on Windows and even make apps in other languages like C++ or objective-c,2018-06-06 11:00:48
298,"We have developed a handful of production mobile apps using xamarin forms; it has been awesome.  a ton of wpf experience transfers over to xamarin forms. We've targeted Android, iOS, and UWP.
The apps we create are for private businesses, so i cannot share their code, but they've utilized web api, the camera, local storage, azure storage, background tasks, push notifications and much more.
Clients have been extremely happy with the spa we've created with xamarin forms",2018-06-06 11:02:35
299,"> IMO, the ecosystem around a language is quite important as well. It's no use getting into C# if there are no tools, frameworks, companies, etc build on it. Unless you're talking about language semantics, syntax etc but this post is about why, from a developer's and productivity perspective, C# is strong. Not so much about the inner workings of the language itself :-).


I'm glad you are excited about C# (again). But you make it sound as if Microsoft never supplied good tools and frameworks, and as if companies couldn't build software with it. The arguments in the article are supported with weak arguments about vendor lock-in, crazy licenses and other tin foil opinions. 

This is how I read your article;

C# is great in 2018 because Microsoft used to be shit, but is no longer. Then you make an argument about Xamarin, because well Windows is shit right? Luckily you can now build software on Mac for Linux, because apparently that is what business truely seek in a development platform. Let's praise .NETCore because that's cool right now. Don't go into details, why would you? Visual Studio? Sucks! Let's use something else because it isn't one of the most loved IDE's out there for at least two decades. Forget Mads, forget C# 7.x and all the upcoming features. Anders is mostly occupied with TypeScript but he must be the reason C# is hip in 2018 but not in 2001. Async/Await .. We've been using that for 6 years at least. 

I'm probably biased because I used to work for Microsoft and have been a .NET developer for more than 10 years. You on the other hand are the opposite. I'm not trying to shit on your article but I hope this has given you som insight into how you might come across to at least some part of the .NET development community. Peace",2018-06-06 11:04:04
300,"I mean, they open-sourced .Net core, and they made Xamarin free, those two are pretty big for cross-platform",2018-06-06 12:50:55
301,Like Xamarin.,2018-06-06 12:51:45
302,"And Microsoft has been the largest contributor to github open source projects the last couple years. They're making a huge push in that direction with. NetCore and opensourcing xamarin. I understand reluctance to host private repositories on github now, I don't see any problem for open source projects. ",2018-06-06 12:52:04
303,"Didnt have a look at xamarin for a long time but the last time 
I used it it looked like a bad version of Android Studio. And Android Studio supports only java. I dont think Microsoft will work a lot on Xamarin, wheres the point in making software for android / IOS if it isnt in the hands of microsoft?",2018-06-06 13:52:37
304,"Last time I checked they never asked for any info to download things from their site. Sure Visual Studio isn't free, minus the Community Edition, but then again it's a pretty dam good ide with a lot of different capabilities.

That said VS Code is completely free, they made Xamarin free (whether it's good or not is a separate issue), and core is also open source.

How ever trying to download something from oracles site? Yeah they want your info. ",2018-06-06 14:38:45
305,"I think the integration of github will probably go the other way around. Meaning that existing MS products will integrate more tightly with it. (There is already github integration in Visual Studio, I could see that for other tools as well. ) 

While this would not benefit non\-MS users, I also see no harm in it happening.  

As long as MS is not actively trying to keep competition from using the platform (restrict the API or remove capabilities) there would not be any harm done.

When it comes to benefiting everyone, I could also see a couple positive changes. Looking at how MS handled the acquisition of Xamarin I'd say it's quite possible that github might offer things like free private repositories in the future.  

People apparently expect that MS will try everything in their power to make github directly profitable, but going by how they have acted lately it is more likely that they are just expanding their  developer ecosystem.

Also, like you said ""I cannot tell what those functionalities will be"", it is really hard to imagine what they would do to even accomplish this. There is no obvious killer feature that they could add that would make a massive difference.

The biggest thing I could imagine on the spot would be to integrate github repos with TFS. That could be a feature, but again it would only expand an existing MS product towards github, not the other way around.

As long as tools and existing platforms remain free I don't think this will make things worse in the long run.

\> Yes, it is available on OSX. However, in turn, this made MS Office the only viable option (since almost nobody use Mac Office anymore, and LibreOffice is popular but not enough to keep the same level as a quite expensive alternative that many people are forced to buy). 

So basically the problem is that MS Office is better than the existing ones and thus push them out of the market? (genuinely asking, I am not in the mac ecosystem at all)  

I don't know anything about Mac Office, but I do know that LibreOffice does not even come close to being able to replace MS Office.  

I use both LibreOffice and MS Office on a regular basis (ironically Libre at work and MS at home) and I can definitely see why LibreOffice is unable to replace MS Office.

Don't get me wrong, monopolies are never a good thing, but when a monopoly exists because nobody offers actual competition than there is really not much that can be done.

Btw, a completely different thought:  

It is possible that the acquisition of github is not part of some long planned business strategy.  

MS has worked a lot with github already and may simply not have wanted them to be bought by someone else.  

Github was going broke, someone was going to buy it. Considering how much work MS put towards Github, they might have just bought it to prevent the exact thing from happening that you are worrying about.

Just an idea I wanted to throw out there, not actual info.",2018-06-06 14:54:23
306,"With xamarin and .net core c# is no longer locked to the windows operating system. Additionally, it is possible to create c# bindings to use c/c++ libraries in a c# application.

 I started with c/c++ and then moved into c#... when I first started using c# it felt like I was using safety scissors instead of c/c++'s table saw... but now, I prefer c# for most tasks and only delv into c/c++ in particular circumstances... 

 C# is more of a rapid application development language the c/c++. Obviously it isn't the most RAD language that exits... but I do personally think the balance between control and ease of development is right where it needs to be. 

 In any case, if you learn one... you'll be able to pick up the other",2018-06-06 14:57:06
307,"Coder here. Normally embedded systems in c/c++ and mobile apps (xamarin/c# + Android/java), but I picked up Javascript in a couple of weeks. I'm currently using it for Medical device app demos with Cordova/phoneGap. 

Best way to code is just create a very small project. Project might be something you will use on every project that you will later use. For me, I always start with a logging framework. Log to file, learn regular expressions, parse log files and use a graphing library to plot data and events. You will carry this for the rest of your career. Trust me. ",2018-06-06 14:57:33
308,"I love VSTS.  they have agents for windows, linux and Mac and it's easy to let it use your own build agents if you like.  Has great flow from builds, all the way to deploying to servers.  I use VSTS to build and publish everything from WPF to web apps to Xamarin, including pushing to the Google and Apple stores.  For me, being able to use one build system to hit all the .NET technologies is very powerful.",2018-06-06 15:07:23
309,"Sure why not, ReactiveUI, Elmish.XamarinForms... anything is possible.",2018-06-06 15:07:25
310,"> Look - repeating corporate PR propaganda is lame. The whole ""mommy, we at github could not find any CEO because all of them were TOO STUPID and we are SO AWESOME!!!"". And now SUDDENLY after +7 billion, wow! They found a new CEO!
> 
> 

You're acting as if GitHub is getting $7 billion in cash which it can then use to fund day-to-day operations. It isn't. Its owners are getting $7.5 billion in Microsoft stock. It doesn't help GitHub's bank balance at all. 

And the new CEO isn't some dude in off the street who's saying ""oh wow, you have $7 billion now? I'd love to be the CEO"". He's the former Xamarin CEO that now works for Microsoft after Xamarin got bought out. Putting Nat Friedman in as the GitHub CEO is very unlikely to have happened without this purchase.
",2018-06-06 15:11:51
311,",       ms,      villain      .             ,          image        github       .

                       Azure,      [ ](https://www.forbes.com/sites/bobevans1/2018/04/27/microsoft-tops-amazon-in-q1-cloud-revenue-6-0-billion-to-5-44-billion-ibm-third-at-4-2-billion/#7a48a18c5d4b)     GitHub   GitLab   Azure   --    edit     github      . 

    cross-platform     ,  MS    ,         MS  ,       C#    JAVA;   MS vs Oracle ; 

       --         ... crossplatform             . 

            Apple           -,     virtual machine  MacOS   EULA   -          apple         , . 

   office             ,                      ,   .      windows 11                          ' ,  .

            (..  Xamarin         )           ,            . 

",2018-06-06 15:23:23
312,"Apple just deprecated OpenGL on the Mac & iOS. I'm telling you, tread carefully when building with Xamarin. You never know what Apple will do. They want that app advantage I've been speaking of! ",2018-06-06 15:26:58
313,I know when they bought over Xamarin they changed it from a paid to a free product. I'm pretty sure they will introduce free private repos to GitHub. It will be viewed positively and make them more competitive with other git services.,2018-06-06 16:15:37
314,"This is awesome. I was looking for something VLC related for Xamarin a couple years ago. Can this library scale/resize/compress videos?

If it's in the readme and I missed it, feel free to be sarcastic about it. I'm under the weather today and possibly didn't read very well.",2018-06-06 16:18:49
315,"Microsoft also bought Minecraft and it's better, made Xamarin not shit and open sourced it and Outlook Online is much much better than Hotmail ever was.

There's a lot of uncertainty, sure, but to most software houses there isn't really a pragmatic reason to switch away from GitHub just yet, and considering elementary JUST moved to GitHub, I really don't think they are anytime soon.",2018-06-06 18:06:11
316,"And a Xamarin Enterprise can cost as much $1899 a year. With that **subscription** you get 'Prime Components'.

All the downvoters and Microsoft love bugs above can get fucked when Im right. ",2018-06-06 19:42:31
317,"I'm developing a Xamarin app that shares the same JavaScript code across-devices, Android already has a bridge that supports synchronous calls.",2018-06-06 19:48:56
318,"Visual Studio for Mac is a thing, but it's really just a rebadged Xamarin Studio. Trying it out for work and it's definitely not got feature parity with Windows. Here I come Git command line...",2018-06-06 20:00:00
319,"Right, but making that arrangement isn't always easy or accessible. 

There's no shortage of locations in Portland, but whether or not you know their Community person or have a contact with a FTE who is willing to risk hosting your space....

Or the group might be mismatched to their business, suppose we wanted to spin up some type of lean-coffee style Android dev group. A Microsoft shop like Viewpoint probably wouldn't be interested, being that they host Xamarin. I'm just presuming with Viewpoint, they're great folks over there. Or, I've heard that the Docker meetup no longer has a meeting location; it's not like Puppet is going to open their doors. 

Then, there's scheduling issues. I recently looked for a space to host a DevOps conference for 100~150 people - seems like a pretty damn valuable recruiting event for any number of companies - yet I got a lot of ""No."" In fact, one company (let's just say a app performance monitoring software company) told me that they are not taking new meetup groups for the next 6 months. 

Yet, all the same, there must be 50+ privately owned locations in the metro area that can accommodate up to 100 people. They're not exactly opening their doors to the public like they used to...",2018-06-06 20:11:02
320,Modern Macbook Pros (2015\+) should all run Xamarin development tools just fine. Those are your best bet if you plan to support iOS/macOS. Just make sure you get a nice SSD and an i5/i7. ,2018-06-06 20:14:05
321,I have done native Android before. Xamarin Forms fit those use cases perfectly. There is a learning curve but once you get it under your belt you will be able to tackle projects like that with Forms with no issues. ,2018-06-06 21:13:36
322,"Its possible, but I think its unlikely.  Look at some of the recent patterns:

* 40% of VMs in Azure run Linux
* SQL Server for Linux launched
* .NET Core runs on Linux and Mac OS is is fully open source
* MS Office on iPad, iPhone and Android devices
* Open sourced Xamarin and gave it away for free
* Created Community Edition of Visual Studio and gave it away for free
* Created VS Code (also fully open source) and gave it away for free
* Created App Center and added support for native iOS, Android and React Native BEFORE Xamarin
* Launched a new class of Micro Controller for embedded devices built 100% on Linux

And a lot of that is just in the last couple of years.

Skype?  Well yeah, Skype is still a bit shitty and the re-design isnt great, but at the end of the day its still free and its not clogged with ads or anything nefarious.  Nokia and Windows 8 are from an era before the current CEO.

Does any of this guarantee they will do the right thing by Gihub?  No.  But for the most part I think theyre smarter than the Microsoft of before and the guy at the top is an engineer, not a marketeer.    Are they perfect?  No.  But I think theyve demonstrated enough tangible change as an organization (through action, rather than just word) to be worthy of being given the benefit of the doubt until the evidence says otherwise.",2018-06-08 16:58:43
323,"I have a few years of programming experience, mostly hobby, but some ""professional"". I'm probably low-intermediate compared to where I'd like to be, so you don't have to listen to me.

>I joined some guys trying to develop a game, we started in Java but then we switched to C# and I was expected to learn XAML.

Game dev is hard. C# coupled with XAML for UI is really difficult to grasp, or at least it has been for me. In my spare time, I've been learning WPF and Xamarin Forms (both xaml) on and off for 2 years now, and I still occasionally have trouble doing simple things in both.

>I decided to try and learn Minecraft plugins, I have Java experience, can't be hard right?

The spigot/bukkit api is easily the worst thing I've ever worked with. Minecraft as a whole is just in a bad place technically, because it was just a prototype or game jam thing that randomly hit huge.

It looks like you tried to do some pretty difficult things before you had the foundation to work with them. I highly recommend [this](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) tutorial series on YouTube. I believe each of his tutorials are in written versions too. These are easily the best tutorials I've ever come across. Don't try to do it all at once though. Maybe a video or 2 a day. After tutorial, make a little console app that uses something from the tutorial, and put it on github. When you're done, you'll have a big base of code you can reference in the future, and it will help you retain everything.

Alternatively, learn python instead, lol.",2018-06-08 17:00:54
324,"This is literally me  for the past 4 years, except I started with Ruby as a python alternative and learned C to understand it better, now I'm developing in Xamarin with C#.",2018-06-08 19:06:47
325,"This is literally me  for the past 4 years, except I started with Ruby as a python alternative and learned C to understand it better, now I'm developing in Xamarin with C#.",2018-06-08 19:06:59
326,"This is literally me  for the past 4 years, except I started with Ruby as a python alternative and learned C to understand it better, now I'm developing in Xamarin with C#.",2018-06-08 19:07:07
327,"Coolt, har sjlv velat lra mig Android via Xamarin men det har aldrig blivit av",2018-06-08 20:15:37
328,[Here's](https://medium.com/swlh/xamarin-vs-ionic-vs-react-native-differences-under-the-hood-6b9cc3d2c826) an article that compares of the popular technologies for cross-platform app development.,2018-06-08 20:26:54
329,"If it's hybrid you have about 3 decent choices for the front end (flutter, xamarin, react native), and the backend can be in any of a number of languages that will work equally well. ",2018-06-08 22:15:12
330,Please make it work with Xamarin properly ,2018-06-08 22:17:58
331,Didn't they buy Xamarin and promptly open source it?,2018-06-08 22:52:17
332,"Eh, I don't know much about Xamarin as I don't use it, but they definitely didn't do well with Skype IMO, and I know more about that.",2018-06-08 23:01:20
333,"Yeah hopefully his doesnt go over like the last time Microsoft and Nat got together in a acquisition setting, right? Where Microsoft bought Xamarin and let them run autonomously while open sourcing the whole thing? Thatd be terrible. ",2018-06-09 01:19:12
334,"PC laptop + visual studio.

You have an iPhone and use Xamarin Live app to test.

To deploy to the Apple store you use a hosted service to build/deploy your app.

Or you get an iMac on the cheap to build (which is more expensive/hassle). Unless youre an Apple fanboy.",2018-06-09 04:15:31
335,This is a big issue in Xamarin and almost nobody talks about it. I wonder if people just leak memory and they don't care or they don't know.,2018-06-09 05:28:33
336,"As you mentioned Xamarin, you should look at what (if any) Android emulator you want to use. Last time I did Android dev, Intel HAXM (or similar) provided a significant performance boost.",2018-06-09 07:11:03
337,Or Xamarin?,2018-06-09 08:40:05
338,the items you mentioned are the items being iterated over and over. you forgot xamarin. shirley they have more positive accomplishments then that?,2018-06-09 13:23:09
339,"But they're giving their Xamarin guy the keys to the github kingdom.

If anything that means they're commited to not breaking it.

Plus they've worked with ubuntu, probably red hat and probably SUSE on Windows Subsystem for Linux, plus they're a member of the Linux Foundation. Microsoft literally announced that they're working on a hardware product that runs linux.

They've given open source a side at their table, and it seems to me like a lot of the fears about ""microsoft ruining github"" are unfounded.

Hilariously enough, Ballmer even praised the SQL server for Linux move.

[https://www.zdnet.com/article/ballmer\-i\-may\-have\-called\-linux\-a\-cancer\-but\-now\-i\-love\-it/](https://www.zdnet.com/article/ballmer-i-may-have-called-linux-a-cancer-but-now-i-love-it/)",2018-06-09 14:12:37
340,"all i hear as a retort is xamarin and linked in. theres got to be more examples than that right?

im not a fan of microsoft selling hardware with an oss os. their current os sends telemetry and puts ads in it.

im not aware of a single company that uses sql on linux.

i mean sure, they are making strides, but that doesnt make concerns unfounded after decades of shit behavior.",2018-06-09 14:19:48
341,"I would keep the main Background Processing switch ON. Then, look at each app and how I use it. If I don't need it to alert me, or provide value by running in the background, I'd turn  it off.

Here's a developer's view, from of all places, Microsoft :)

https://docs.microsoft.com/en-us/xamarin/ios/app-fundamentals/backgrounding/introduction-to-backgrounding-in-ios
",2018-06-09 16:40:58
342,"> Your best bet at this point would be to have your stacklayouts height dynamic.

I'm saying it was dynamic. Xamarin ppdated and the behavior of the code changed. I have a cell with an even taller image that is larger so the stack height is dynamic. I just can't get the image to fill the width and have the stack fit the image any more. I still have the white/red space on the sides. :/",2018-06-09 17:59:46
343,"The only guaranteed way to go at the moment is Native. But I definitely think it's good to examine these other solutions (React Native, Ionic, Flutter, Xamarin) as well. I just would be cautious about throwing all my eggs into one of the non-native baskets, that's all.",2018-06-09 18:12:53
344,"You need a mac to compile ios apps, even with Xamarin.
",2018-06-09 19:38:30
345,"Loaded from the back end using [FFImageLoading](https://github.com/luberda-molinet/FFImageLoading/wiki/Xamarin.Forms-API). I am going to try and load an image saved in the app and see how it behaves. the xaml code I provided is a template for a listView cell so that is the full code other than the xaml boilerpalte in the file. I have other cells that are using FFImageLoading that are working correctly, meaning the stack is resizing. 

[Full XAML file](https://pastebin.com/Zxv5dcxw)
The c# backend file is just setting the source to the image. I was telling the image to be the width of the screen in the c# file but after the update it was making it worse by decreasing the image size even more. ",2018-06-09 23:57:54
346,"Someone posted about this last year and it seems like it's not an inside thing, the government just looks at the numbers.

I removed the dates and removed 1/2 my jobs.  Some ask when you graduated from college, which should be illegal.

I hear about react native and Flutter and others, but seems that ObjC and Swift are still the popular ones.  I live in the commute zone to Silicon Valley and we had a company just on the edge of what most would consider the commute zone.  They were all ObjC for years, then Swift, then C# about the time Microsoft bought that Xamarin.  They ran ads for jobs using Xamarin for months, over and over again.  Then after about a year, they ran tons and tons of Swift ads.  They were hiring anyone even willing to learn Swift.

The reality of the market place for languages is that there is a balance.  A company might want language X, but that doesn't mean that a programmer is will to bet their career on that language.

I was at a company during the DotCom era that was code locked with something that was outdated by many years and they wouldn't pay the priced to move to a different platform.  It was DOS based and offered no real Windows solution.  Another one was using Pascal, Delphi and the number of people willing to commit career suicide was pretty small.

At the one company, we tried for about 2 years to get anyone even willing to learn parts of the language, no good takers.  All we got were people that couldn't even open a file on a server.

I left, others left and they were finally forced to hire TONS of programmers to do everything over from scratch.

It's not just one side, programmers don't want to be tied to a sinking ship.  Even Swift got a pretty big push back, but Apple open sourced it and pushed pretty hard to make it stick.

Apple also has a history of not allowing certain types of apps, and they are one of the big players.",2018-06-10 02:00:43
347,"I actually love VSC but it is strange seeing the applause for VSC but then vilifying Microsoft for purchasing GitHub.  Couple of side notes. 
Fuck PHP. Used it like 11 years ago and never felt like it was serious. But Facebook proved me wrong I guess.  And I hate Java with a passion. The language is ok I guess, but the IDEs always sucked. Eclipse made me want to kill myself.  NetBeans was better for sure. 
And i don't understand the Java package management world. Maven was annoying.  I think that is why i basically stopped Android development. Sad but true.  Maybe ill put more time into Xamarin instead. 

This is all coming from a Visual Studio guy who loves the IDE with easy Nuget package management. Clean UI, everything. 

I love Notepad++ but i also have Notepad2 for quick start",2018-06-10 02:07:50
348,"I'm not familiar with BoundsConstraint so this might not be totally useful, but looking at the RelativeLayout code in github, the other constraints use:

[https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/Constraint.cs](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/Constraint.cs)

But the BoundsConstraint uses:

[https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/BoundsConstraint.cs](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/BoundsConstraint.cs)

So it might be mismatch of value since it needs an expression using Func\<Rectangle\>.

This is just a shot in the dark though. May help, may not.",2018-06-10 03:43:04
349,"I do have a managed server. I am not entirely sure how I would go about using the iOS simulator on it, I would have to send my code to the MacInCloud server, open in xcode and then compile it to test my app? And then rinse and repeat every time I make any changes? This seems like a hassle, what I'm wondering is if there is a better workflow for this?  


It seems like a dream to be able to connect somehow to the remote mac server like with Xamarin and then get the simulator mirrored on my windows pc. If someone is working with a remote mac environment I would love to hear more about the workflow. ",2018-06-10 04:55:42
350,"You have Web API and MVC. These both run on .NET Framework and .NET Core.

On .NET Core, you would call them ASP.NET Core MVC or ASP.NET Core Web API.

You use MVC for creating a website and Web API for creating.. a web API, or web service.

JavaScript is a part of the View in M**V**C. The View contains HTML, CSS and JavaScript. It's the client-side stuff.

MVC 5 was the last version of MVC for the .NET Framework. MVC beyond that uses .NET Core. There are differences between these.

.NET Framework runs on Windows, .NET Core runs on Windows, and some macOS and Linux versions/distros. There's also Mono, which is Xamarin's version of .NET Framework for various platforms.",2018-06-10 06:13:21
351,"The pocket edition had already come out for Android and iOS at the time. It had also come out for XBox. It's a very small step between compiling for XBox and compiling for Windows Phone (or Windows for that matter).

If you're programming for mobile, you are definitely ""forced"" into each mobile OS (with iOS you are also forced to do all your development on macOS). Unless you're using some middleware such as Unity (for games) or Xamarin (for apps), there's no way to make a program that will run on all of them. Same thing goes for the consoles.

Maybe you *do* have a skewed version of development - tools that only work in their respective OS are the rule, not the exception ",2018-06-10 07:14:16
352,"Care to elaborate?

I was sligtly mistaking in that it was based on Xamarin Studio, not MonoDevelop as I initially wrote. But the original point still stands.",2018-06-10 07:50:04
353,"Visual Studio runs on macOS (https://www.visualstudio.com/vs/mac/).

MonoDevelop is not at all related to VS. Neither is Xamarin.",2018-06-10 10:36:58
354,"Microsoft bought Xamarin and rebranded Xamarin Studio as Visual Studio for Mac, which in turn is based on MonoDevelop. It even mentions Xamarin on that page you linked.

Visual Studio and Visual Studio for Mac are two very different IDEs, and the former ONLY runs on Windows. ",2018-06-10 10:44:16
355,"Yes, you will get biased answer here.  As far as Cross Platform vs Native goes, it depends if you have the appetite to duplicate your app in 2 languages.  If you're a small team, possibly just yourself, I think there's no question you need to use a Cross Platform tool from a productivity point of view.  

All my apps for very high profile companies have been Xamarin Native (3 and counting),  the reason being that our developers are highly skilled Native developers (ie used to code in Objective\-C and Java).

That being said, I tried my hand at Xamarin Forms (version 2.5) and I have to say I was very pleasanlty suprised.  With CSS and Flex Layout in Xamarin Forms 3.0, I think its a winner.   So far , there's nothing that I haven't been able to achieve that the designers have thrown at me.  One or two well chosen renderers, but the rest Xamarin Forms is totally capable of doing.  It took me a couple of weeks to figure out some patterns and quirks but once you understand it, Xamarin Forms is very productive.

I think the choice of Xamarin Forms vs Xamarin Native all depends on what you/your team's backround is. If its Windows based (UWP, WPF), Xamarin Forms will be the way to go. If you have a strong Native skills, Xamarin Native will make you feel more at home.

Sorry in a round about way, I would say ""it depends"". :-D

",2018-06-10 15:22:44
356,"Okay now that we have more background to your situation, I think if your iOS app is to test the  waters with an MVP (minimum viable product) with a closed set of users, and if you can rapidly develop it , then Native iOS is probably the way to go.  If however your MVP is going to stick and an Android App will be required, and there won't be time to rewrite it (which is probably the case)  its probably better to invest in the time now, especially as single developer and do it in Xamarin.  If you're going to have to learn a new platform (ie Android), why not put your time to learn Xamarin.

The jump from Native to Xamarin Native is not that big.  You just have to learn C# and if you've been coding in swift already, you'll be surprised how similar it is.

One last comment.  People say that Xamarin is intimidating and its a new framework. Xamarin is actually not even a framework.  It just a C# wrapper on Native, nothing more, no new API's.  Your storyboards, nibs totally work in Xamarin. ",2018-06-10 15:56:14
357,"Yeah, I don't think Xamarin is for you if you can't understand what the 3rd project is and how the UI works. 

Stick to duplicating your app in Android and iOS natively.",2018-06-10 17:30:22
358,"The Droid project compiles to an APK and its settings can be tweaked exactly the way you tweak and Android Studio project (ie AppManifest).  You include your native android resources/drawables/layouts.  These can't be shared with iOS so thats why its kept separate from the iOS project.  The iOS project has Storyboards, Info.Plist, Assets which can't be understood by/or shared with Android project.

The third project is the Core where you put all your common code. Most apps use some of of interent data, so your classes to fetch data over HTTP. 

The official xamarin samples should be your first stop. https://developer.xamarin.com/samples-all/

More advanced projects use MVVM which completely remove all functionality from the Views (ViewControllers and Activities). Even navigation is moved to the Core.

The best MVVM framework is arguably MVVMCross .  Check out their simple TipCalculator Example or the Starwars App samples:

https://github.com/MvvmCross/MvvmCross-Samples/tree/master/TipCalc
https://github.com/MvvmCross/MvvmCross-Samples/tree/master/StarWarsSample


Good luck!


",2018-06-10 17:48:18
359,"I believe doing that without mambo-jambo dirty code is impossible. It is the price you need to pay for cross- platform frameworks.
I think the only solution is to make your own control fully in Xamarin forms, instade of using native Android code as usual plugins do.",2018-06-10 20:52:02
360,I'm so glad my Xamarin Forms project is over... Don't ever touch Xamarin Forms,2018-06-10 22:31:47
361,"Look at Xamarin and Appcelerator. Thats exactly what does IDEs do, Ive worked with them",2018-06-11 04:19:29
362,"Xamarin does it through CLI.  Appcelerator is javascript calling a hook in a JVM, so that doesn't really seem to be cross-platform, at least not in the sense it isn't recompiling anything into new native code.  Is that right?

The IDE is just the tool you use, not the smart part.",2018-06-11 04:29:22
363,"History from Xamarin. Yes, I agree.",2018-06-11 10:19:19
364,"Okay, no. Visual Studio for Mac comes with support for .net Core, .net Standard and the full mono framework. The challenge here is that native System.Windows.Forms does not exist on Mac. Once again, mono framework to the rescue in the form of [MWF](http://www.mono-project.com/docs/gui/winforms/) . This is unsupported and no maintained any more. 

You can however use [Eto](https://github.com/picoe/Eto), [XWT](https://github.com/mono/xwt) or even Xamarin to build GUI applications on Mac which will be cross platform compatible.",2018-06-11 13:58:20
365,"So I never packaged anything before, have no idea how or where to even begin, barely used Linux more than 5 years and never actually trained for it, learning by doing and google for the most part... Yet I would never in my wildest dreams think this would be the right way to do this or anything regarding installing software.

Last I checked MS treats their system folders like holy ground too, they fill them full of garbage without the system cannot run and when you start to alter things the system starts screaming at you, what did they think Linux was any different? This either shows a complete lack of commitment or training OR malicious intend of... some sort.

Honestly, first Xamarin, MS inserting their devs in and fucking up two releases of mono, now GitHub and this?! Can we stop pretending MS knows what they are doing and vet them properly like we do with everybody else?! I mean, if I were to start submitting patches to core systems or whatever I would be scolded and cut in half, yet they somehow get special treatment with, evidently, no credentials or actions to back them up?!

This is madness, we are letting a wild animal run wild in Unixland and no one seems to be afraid they might be next or have to clean up the poop? At least try to keep them off the important parts, but apparently(judging from this) we even failed that.",2018-06-11 14:18:29
366,"I hate this. $100 a year is just too much. I haven't tried flutter yet, does it require you to connect with a Mac computer? I think Xamarin does at least",2018-06-11 15:19:46
367,"> We do not need GitLab's service.

This hasn't changed. From a certain perspective, this is an existing _downside_ of moving to Gitlab that is _not_ Gitlab.com: projects have to find people to maintain the Gitlab installation, where previously that was handled for free by GitHub. OS projects already have few people able to contribute, adding the burden of additional project infrastructure weighs them down even more. I'm glad that larger projects can take advantage of it though, but those projects, like Freedesktop, GNOME, etc. have financial backers that smaller projects clearly do not.

One clear benefit of GitHub is its network effect, and I speculate that this a major reason why Microsoft bought it: millions of developers use it.

Think: what process does one have to endure to propose a change/patch to a non-GitHub open source project? Now, how has GitHub eliminated _most_ of the overhead of that process? I know step one for me is ""I don't want to have to create yet another account."" GitHub eliminated that; centralization has its benefits and detractions.

> They've been ruining every service & software they've bought out recently.

Can you further substantiate this? It's really easy to make this claim because of Microsoft's ""embrace, extend, extinguish"" _modus operandi_ from 15-20 years ago but under the leadership of Satya Nadella, things have changed a lot. Reviewing the [list of acquisitions](https://en.wikipedia.org/wiki/List_of_mergers_and_acquisitions_by_Microsoft#Acquisitions), ones I recognize easily that I would say have been made _better_ because of the acquisition include LinkedIn, Xamarin (Mono), TouchType (SwiftKey), Mojang (Minecraft), etc. They definitely messed up the Nokia mobile unit but that was a result of Windows Phone, not Nokia hardware. Skype got better under Microsoft but its mediocrity, in general, spawned a host of competitors that are better.

>Microsoft buying GitHub gives us all the more a reason to make the switch.

You've not made a solid case in your post. 

Arguments:

1. Open source projects should use open source software for infrastructure and collaboration.
2. Microsoft ruins everything.
3. Microsoft will use GitHub's patents to quash competition.

Your arguments are philosophical and speculative. Think like a business owner, like a manager: what is the _business benefit_ of moving from GitHub to Gitlab, self-hosted or Gitlab.com, that didn't already exist?",2018-06-11 15:50:16
368,"I did some Xamarin apps, then had to quickly switch over to Android Studio for another app. By god, it was horrendous. I think VS spoiled me.",2018-06-11 17:14:16
369,"It all depends on what you want to do. For simple apps, Forms will likely be easier. If you go Xamarin Android, you will find the answers to from questions about Java/Android. Just translate to Xamarin.",2018-06-11 17:23:58
370,"Redirecting you to the very first lines of my comment:

\> For what languages?

\> for anything C\+\+.

Even if VS for Mac was the same as VS for Windows but didn't support C\+\+ (which my point was, again, **exclusively about**), no, it's not VS. It's a different product, rebranded under the Visual Studio name*.*

\> The core of the IDE definitely has a heritage in Xamarin Studio, but  this release has brought in so much more with .NET Core/ASP.NET Core  development for Web apps/services, Unity support for game development  and cloud integration with directly publishing your Web apps/services  and previews of Docker and Azure Functions coming very soon. \-\- Microsoft

tl;dr ""it's Xamarin Studio but supports more techs"".

\> Why would windows bother make the Mac version support C\+\+ when you have freaking Xcode available.

Alternatives. Why would we bother having multiple IDEs?

\> Last thing : an IDE dont have to support perfectly every language in the world.

My point is about C\+\+ under VS, exclusively. **From the very first lines.** If you don't care about C\+\+ under VS then, great! You could have skipped my first message.",2018-06-11 18:23:59
371,Think you could use Xamarin but I havent needed to use it for a project in ages and cant remember if this is correct. ,2018-06-11 19:15:26
372,"Swift is certainly a great way to put an idea to practice, but it may save a lot of work on the other side of the process to use a cross-platform framework like Xamarin or PhoneGap. 

Up to you guys!",2018-06-11 19:27:40
373,there was just a thread on this - https://www.reddit.com/r/xamarindevelopers/comments/8p3yvz/native_or_xamarin/,2018-06-11 22:37:16
374,"Depends on the team. There's no diktat on which OS to use, as long as you're working effectively - although there are compliance rules for minimum update levels, if running Windows. Typically acquisitions (like ours) skew heavily into not-Windows. I expect GitHub to be a big source of Linux people. Xamarin was Mac-heavy.

[Visual Studio Team Services](https://www.visualstudio.com/team-services/) is our hosting plus CI plus CD plus project management plus issue tracking etc etc etc etc product, it's dogfooded heavily, and I assume it runs on Windows. Some teams - typically those working a lot on Open Source stuff - use more common external things like GitHub (ex external I guess), Jenkins, etc.",2018-06-11 23:31:36
375,It depends on the complexity of your app. If youre going to do some crazy/custom UI then native is the way to go. Snapchat is a good example of this. Evyrhting they did in the most recent update cant be done in Xamarin.Forms or its very very difficult to do so. But if your only pulling info from a backend and your app isnt doing anything crazy then forms is the way to go.,2018-06-11 23:55:08
376,"Regardless, you'll probably have to translate some Java to C# somewhere, when you find something on stack overflow, but Xamarin.Android is pretty popular and you will find a lot of answers for it. Support isn't lacking.

I'm probably going to replace a Xamarin.Android app with a Forms app, because that Forms app is going to cover Android, macOS, and perhaps iOS. Personally I think Forms has helped me to make a better Android UI. Also looks nice on iOS. macOS doesn't look quite as good, in my opinion.

I think the main advantage to Forms, aside from sharing most of the UI, is that you don't have to do native UI. With Android, that would be Activities, Layouts, referencing all your controls in the activity, intents to switch activities... using Forms is a lot like using WPF or UWP. UI and navigation is a lot simpler, and requires much less code.

I believe you can even switch between the Forms activity (in Forms on Android, everything takes place in one activity) and other activities.",2018-06-12 01:27:15
377,"O curso de ADS vai te dar uma base dos principais campos da rea de TI, com enfoque na rea de desenvolvimento/programao. Pra se dar bem, alm de fazer seu dever de casa em todas as disciplinas do curso,  de suma importncia voc se focar em algum campo, em alguma tecnologia ou at mesmo em alguma linguagem (mas por favor, no vire um fanboy). E essa tecnologia que voc vai se focar, vai ser a que voc vai estudar por fora da faculdade. 

Por exemplo, eu durante a faculdade me foquei em desenvolvimento mobile, na tecnologia Xamarin, consequentemente em CSharp (C#). A faculdade que ficou por me dar uma base de outras tecnologias como SQL, JS/HTML/CSS, outras linguagens de programao e seus paradigmas, redes, sistemas operacionais e todo o alicerce para eu ter uma noo da rea e como as coisas funcionam.

Sobre o curso de ADS ser aceito em concursos pblicos, praticamente todos aceitam o tecnlogo, salvo algumas excees quando o concurso exige bacharelado especfico (como cincia da computao, por exemplo). Geralmente voc vai ver nos editais algo como ""bacharelado/superior em tecnologia e afins"", o que vlida o curso de ADS. Mas caso isso seja um impedimento pra ti (no caso de uma exigncia de bacharelado especfico), nada impede voc fazer um bacharelado depois, como os cursos so muito parecidos, voc vai cortar boa parte da grade curricular com aproveitamento e vai fazer meia dzia de cadeiras no final das contas. E nisso voc ter duas graduaes de nvel superior. 
No mais, essa diferenciao de bacharelado/tecnlogos est praticamente extinta em concursos. ",2018-06-12 04:43:54
378,"My TFS is Visual Studio Online, sorry.

Ok I was just thinking that starting from the beginning would be better, since my old project was started quite some time ago, as an Windows Form applikation. With an added Windows Phone project.

And my plan was to move the whole thing to Cross-Platform using Xamarin Forms.",2018-06-12 11:06:57
379,Why can't you develop for iOS with Xamarin?,2018-06-12 16:51:54
380,">Here's an example of someone testing the web framework and showing it actually performs better on Linux than it does on Windows. 

You have to remember that it wasn't Microsoft who developed the FLOSS implementations of C#. Xamarin did (which Microsoft eventually purchased). Those performance benefits are in spite of Microsoft, not because of them.",2018-06-12 17:11:44
381,"CodeAcademy is a good resource. In my opinion, the best way to learn something is to try to solve a problem. In your case \- try to create something very simple. The most problems that you encounter will already be solved on stackoverflow (this is actually very important resource), reddit or somewhere else.

As for an actual software, for your needs (web) you will need a code editor (there are a lot of them: the best are Sublime Text, VSCode and Atom). For mobile apps you will need something like Android Studio (for android apps), XCode (for ios apps, also you will need mac) or Visual Studio (community edition) with Xamarin (for android and ios apps).  


[Here is web developer roadmap.](https://github.com/kamranahmedse/developer-roadmap)

[List of simple projects ideas.](https://github.com/karan/Projects)",2018-06-12 19:33:40
382,"I'n not a xamarin expert, so I can't help you, but if you have discord, you could try the C# server. https://discord.gg/0np62rq4o8GnQO9l",2018-06-13 04:06:03
383,"I work primarily in good ole plain C/C++ for my primary work for a company. 

I have a side-business writing mobile applications in which I use Objective-C (iOS), Java (Android), and more recently Xamarin (C# for both platforms). 

I am currently playing around with Go on my own because its concurrency patterns are incredibly interesting, especially in high-volume server transactions.
",2018-06-13 04:38:25
384,"What bothers me most is that they have no plans whatsoever to make a Linux version. If Microsoft  Linux, then why not compile Visual Studio for Mac on Linux? We already know MonoDevelop (on which VSmac is based) runs perfectly on Linux, and there's no reason why the Xamarin Tools for Android wouldn't work as well.",2018-06-13 05:06:43
385,Do you want to reduce supporting and updating the mobile app for your business? Choose #Xamarin #mobile #app #development  one of the front-running cross-platform #framework. Visit: https://bit.ly/2JyNo2C,2018-06-13 06:36:51
386,Remember Xamarin?,2018-06-13 09:10:12
387,Looks better than Xamarin already from what I've seen...,2018-06-13 12:31:27
388,Have you tried not using Xamarin? I've found that works 100&#37; of the time,2018-06-13 12:44:27
389,"Usually you would use something called a tile atlas or similar and use a tool that generates them.

This CocosSharp tutorial might help you understanding how it all works.

https://docs.microsoft.com/en-us/xamarin/graphics-games/cocossharp/tiled

It makes use of [Tiled](https://www.mapeditor.org/).",2018-06-13 18:28:17
390,On a Xamarin project the answer is NEVER. Once you get it working dont even look at it. ,2018-06-13 18:31:03
391,"Not necessarily, you should better understand what toolchains are available for C#.

https://docs.microsoft.com/en-us/dotnet/framework/net-native/

https://github.com/dotnet/corert

https://docs.microsoft.com/en-us/xamarin/ios/deploy-test/ios-build-mechanics?tabs=vsmac

https://docs.microsoft.com/en-us/dotnet/framework/tools/ngen-exe-native-image-generator

https://docs.unity3d.com/Manual/IL2CPP.html",2018-06-13 18:40:15
392,"C# is cross platform now. Microsoft released .Net core and with Xamarin.forms you can target all platforms at once with native compiling. Not to mention Gtk#, etc....",2018-06-14 00:28:57
393,Microsoft bought Xamarin who offer a native cross platform framework. Did you consider using Xamarin.Forms for Teams instead of Electron? ,2018-06-14 05:57:59
394,"> You only work in Silicon Valley as a software engineer if you are one of the best in the field

Worked with people in Silicon Valley, super overrated really. I was working for a company in the automotive domain, half the team was in Silicon Valley and the other half was contractors and people in the London office, I was a contractor on it and the Silicon Valley crowd mostly did specs rather than actually developing fucking anything, it was like pulling teeth getting work out of them or answers to emails. This was a big multinational company based out of there with people on 100k+ and a team of 20 devs on the project. All in all out of the two sides of the project the most code in terms of volume, the most function in the project just came from the contractors on it and the London office. You can have a masters in the US and not actually be a good developer, usually the people who have actual experience on active projects have a lot more reliability. Along that line most of the best developers I know and the ones who have been scooped up in the startups that get bought by Silicon Valley are the open source devs with less schooling but more active contributions to projects. Xamarin for instance was bought by Microsoft 2 years ago now and half of that company were people straight out of open source and contracting from outside of the US. 

> you can get a 2:2 in an IT and a start up will hire you for 30/40k

Not exactly, 30k is the starting salary, the issue is the ramp up is very low. You go up in increments of 5k, my current position is senior in my team and I'm only on 50k, I just went into this position when there wasn't much investment going on and 50k + performance bonuses was the best that was going for someone with 5 years experience in my language. The best bet for my next job will be that I go up to 70k but the 100k level jobs just aren't here really unless you are contracting and that isn't a let's go to Silicon Valley to get the higher paid jobs, it's move into management to get the higher paid job in Ireland. It's just the median wage for developers is on the low end for some reason even though the quality is fine. 

Oh and fun fact, most companies in Ireland ask for 2 years experience for entry level developer positions so even if you just pop out of college, you aren't walking into a job easily. ",2018-06-14 09:19:03
395,"In general I would always go native, cause I only focus on Android as mobile platform.

When targeting both iOS and Android, C++ for business logic with native views, Qt, Xamarin, Flutter would be my options for anything complex that makes use of the device features.

If we are talking about simple text+image apps then I am betting on PWAs.",2018-06-14 09:29:51
396,"Hi,
I crossposted it here because I walked the extra mile to have this available on Windows 10 Mobile. And I feel like to celebrate it, or something, with people who might appreciate it.

I might write a further post explaining why supporting Mobile has become hard with Xamarin, if anyones interested.
",2018-06-14 09:40:44
397,You can make those apps easily on Windows though using Xamarin and other IDE's.,2018-06-14 14:36:12
398,"This x 1 million!

Every non-developer or desktop developer is like ""just use Xamarin"", and then I have to explain for the 853rd time that doing so is basically us writing a Windows Phone app (who does that!?) and then trying to make that work in iOS and Android, while still having to write platform-specific code anyway, but now with added limitations, dependencies, and costs!

We're far better off going native and using C/C++ for the common stuff between platforms. That has served us really well, despite the JNI stuff being a little tedious.",2018-06-14 15:00:58
399,"> Xamarin  

yeaaah, it's not just the packaging, the whole ecosystem is bad.

foreg, I hack the java.interop right now, but I can't make any pull request to their git, because It would break their ""standards"" and everything is a mess/  2012 un\-updated code, with net framework **4.5**.. 

I can't wait for the CoreCLR arm32 anymore!! I really want to drop the current Xamarin into the trash and start a new interop with the coreclr without mono",2018-06-14 16:17:21
400,Your Xamarin experience and my Xamarin experience are complete opposites.,2018-06-14 16:23:15
401,"It's not Java, but have you seen Xamarin? I got a Mac app running in a few days, using existing code from my Android and WPF projects. I managed to share pretty much everything, and for stuff that requires native APIs like image resizing, Xamarin has them all available. I get to C# when using Apple's APIs, rather than Obj-C or Swift, a big bonus for me.

Xamarin definitely seems pretty rich. Xamarin Forms works really well for sharing UI too.

I don't know what the situation is with competitors like phone gap, but Xamarin seems to be the leader in this segment.",2018-06-14 18:42:48
402,"Xamarin was actually what I was thinking about while writing this. And that's why I included the caveat that there can be exceptions: if you have a relatively simple app that sticks with the various platforms core design tenets and doesn't try to get too fancy with views, you can have a bit more success. But the big businesses that most need these tools also tend to toss platform ui design specs out the window, then you're back to square one.

I will agree though, of the tools I've used, xamarin forms was probably the most robust UI layer solution I saw.",2018-06-14 18:57:00
403,"Aw thanks :) 

Ah ok, you're polling, and that's not necessary. You'll get some really good guidance from Stephen (Cleary) which will make it, ... dammit I want to say clear, but that's a pun :) If you think about it, the idea of concurrent code is to let something happen on another thread and then notify you when it's done. If you're sat there going ""You done? no You done? no You done??? no YOU DONE?????? no"" you're expending a lot of effort. So we have lots of constructs that allow for notifications. Skipping most of history, Tasks for example can run some code once they complete and you can tell it which thread to run it on. The more modern alternative is to let async await just magic the details away.

The dispatcher is just a helper class that makes it easier to deal with the SynchronizationContext. async await takes out the need for a specific helper, which means your code will be portable to Xamarin, Winforms, UWP and others. They all use slightly different Dispatcher-like classes and in Winforms case, a slightly different Paradigm generally (related to its age, bless). There's nothing wrong with it, but async await, once you get your head around it (took me longer than I wish to admit) is elegant and complete. 

I know that's really wishy washy, I was going to write a little code example, but honestly, until you get the concepts of async await down, you will sort of look at it and go ""..."" and then, if you're like me, there will be a million unanswered questions :D 

You'll be fine, write code, ask questions and there will always be someone to help :)

",2018-06-14 19:04:08
404,"Yeah, it is pretty robust. Great docs and lots of resources online. It will become more difficult when you want to include something in your UI that Xamarin Forms doesn't support, because it doesn't exist on all of the Xamarin Forms platforms. It is better to keep the UI simpler.

If you get to a point where you have to implement custom UI for each platform, you will be missing most of the point of Forms, and then from a C# perspective you would target Xamarin.Android, Xamarin.iOS, e.t.c. and use the native UI APIs.

I generally like Forms because the UI is created in a more Windows-like way. I think it's simpler than dealing with Android Activities and Layouts. I don't even know how you do that on iOS, but the Forms way is working pretty great for me.

TL;DR: If you have a simple UI that uses controls availble on all the platforms, Xamarin Forms works pretty well. Also supports a lot of platforms, and Linux is coming too.
",2018-06-14 19:12:51
405,"So, what are you using to develop your app? This app could be done easily in Unity and Unity allows for cross platform with ease. Same with Xamarin.",2018-06-14 19:34:58
406,"this [book](https://docs.microsoft.com/en-us/xamarin/xamarin-forms/creating-mobile-apps-xamarin-forms/) is great, not only the author describes xamarin but also gives own opinions what should be used for different approaches on apps. Then watch some youtube tutorial and develop your first app with them. To me personally was a big help, [this great tutorial](https://www.youtube.com/watch?v=C5DHkIcIIgc&list=PLV916idiqLvcKS1JY3S3jHWx9ELGJ1cJB)
My advice: first after creating a project, update all nugget modules (xamarin too). Second.. if you have a problem ask here or on official forums, there are many people who will help you.
Happy coding.",2018-06-14 20:33:51
407,If he's learning c# and wants to do mobile why not xamarin,2018-06-14 21:26:38
408,"> Xamarin Forms works really well for sharing UI too.

oh really?",2018-06-14 21:35:27
409,"I have had some build issues. Sometimes I need to delete the obj folder (generated folder) or rebuild a target platform. I've also been getting some incorrect red squigglies regarding the UI interactions but that could be my Visual Studio version.

I can agree with most of the first half of what the guy in your link wrote. Not the second half. I'm not sure what his issue was but Xamarin.Android worked great for me, and I'm enjoying Forms even more.",2018-06-14 22:24:57
410,"You can use C# for web dev and apps as well. Take a look at ASP.net and Xamarin. The .NET framework is extremely powerful and versatile.  

That being said, HTML5, CSS 3, And JavaScript (Not Java!) Are the big web dev languages. Keep in mind though, standard object oriented stuff you might learn with C# doesn't necessarily cross over to JavaScript. And there is more to JS than just the syntax. There are libraries and libraries of stuff in web dev. Like react, Node.Js, bootstrap, and hundreds of other tools. 

My advice: pick a language and learn that first. Know the basics of what others are for, but become proficient in one language before starting to learn another. ",2018-06-14 23:00:06
411,"Which is why Xamarin offers 3 flavours.  Xamarin Forms, Xamarin Native and a mix of the two.

It all depends on your skill and appetite to do native development and learn the respective UI constructs.  If you want to be close to the metal, Xamarin Native exposes 100% API access, you just use C#.  Literally any Java code you find on the net can be copied and pasted, modify to title case (because generally speaking, Java uses lowercase method names to start from with) and you're good to go.  Native layout code you just copy and paste as is.

It also depends on your team's skillset.  Like in your case if your team has objective-c/swift, java/Kotlin and the only a c++ developer for common stuff that's great. 

As always, it depends on your team's skillset.


",2018-06-15 01:21:06
412,"only until the next update, which breaks your support library, google maps and doesn't do shit until you downgrade again.... at least that is my experience with Xamarin Forms/Native...",2018-06-15 05:36:43
413,"I suppose it's weird that you say you dislike VS but you say you want to work with WinForm & WPF.

If you say you're working on ASP.NET, console apps, windows service, Unity or maybe Xamarin, I can see VS Code, Jetbrains Rider or other editors as viable path.

But WinForm & WPF? AFAIK only Visual Studio offers WinForm designer for C# (aside from the no longer maintained SharpDevelop and maybe the upcoming RemObjects Water), and while Rider have XAML preview tool, it's still non-interactive, making working with it cumbersome if you have complex UI.

With decent enough PC (SSD, largish RAM, non-potato CPU), VS is fast & have enough features to warrant the resources. Most alternative outside Rider just took too much CPU & RAM without offering real benefits. ",2018-06-15 07:19:52
414,I would recommend learning a cross platform tool for mobile development Xamarin/React Native.,2018-06-15 11:56:47
415,I'm pretty sure Xamarin can do what you're describing.,2018-06-15 13:51:07
416,"	
Job Description:

Provide technical design and development work for Xamarin .Net mobile development through knowledge of the Xamarin toolset, iOS xCode and Swift development skills for user interface design and implementation as well as Android development skills. Participate with the mobile development team in understanding and executing the product vision for Pando and FuzeCast mobile applications. Work with the API team to ensure the required specifications for functionality are made available and processed correctly. Participate closely with the QA and product readiness team to ensure all aspects of the requirements are met, pass QA, and ready for product roll out. 

REQUIREMENTS:

Bachelors degree (or foreign equivalent) in Computer Science, Applied Computer Science, or Computer Information Systems plus 2 years of experience in the offered position or related position.
Xamarin development skills
Android Java Mobile Development
iOS Xcode mobile development
SQL  MSSQL, Postgres query and stored procedures
Web API  development and design skills
Competent HTML, CSS and web skills
 ",2018-06-15 15:08:22
417,"I've found it's only slow on underpowered systems.
On my Mac Mini (late 2014, 1.4GHz, 4GiB RAM) it really is slow. But then again, 4GiB is nowhere near enough to seriously develop software anymore. 
On my server (Intel Xeon E3 @ 43.3GHz, 16GiB RAM) it runs perfectly. Startup time is really slow, but then again, it is loading a lot of stuff in to RAM. 

The apps I've written with it all seem to perform fine. 
Whether it's C#, C++ or C# w/ Xamarin. I've never had any performance differences, when comparing app speeds with older versions of the IDE. Even when using the same .Net version. 
I haven't compared older versions of .Net to newer ones, but I doubt there would be much of a difference ",2018-06-15 15:21:23
418,Xamarin trying to implement WPF when everyone else is moving to UWP,2018-06-15 17:57:11
419,Pf. Anyone complaining about Visual Studio didn't ever work with Xamarin or MonoDevelop. ,2018-06-15 20:19:13
420,"I'm also curious what is about to happen. Three largest Microsoft acquisitions so far?

* LinkedIn - neutral here, doesn't seem screwed to me (it's just as stupid as before, but I'm not using it regullary).
* Skype - yeah, I guess it would work out better without Microsoft trying to integrate it everywhere (wrong), it would probably be a serious competitor of Messenger or WhatsUp.
* Nokia - serious fuckup here.

They also bought Mojang or Xamarin and afaik, nothing wrong happened here. HotMail (now OutLook) - seems fine to me, or works as expected to me, at least.

That being said, Microsoft doesn't seem to destroy everything, but GitHub is something very different. I hope they'll just leave it and do the integration things in their current products (like Azure), thus potentially make more devs to join GitHub.

From open-source perspective, Microsoft does what it can to show they're not evil anymore, last years. Fingers crossed.",2018-06-15 20:58:09
421,"See section ""Future of Windows Desktop Development"" here:

https://blogs.msdn.microsoft.com/visualstudio/2018/05/07/microsoft-build-2018-new-releases-for-visual-studio-visual-studio-for-mac-net-core-and-xamarin-forms/",2018-06-15 21:12:00
422,What are your goals? Xamarin is pretty good if you want to develop some native apps and have a good c# background. ,2018-06-15 21:46:36
423,Maybe: https://trends.google.com/trends/explore?date=today%205-y&geo=US&q=Xamarin,2018-06-15 21:49:22
424,Are they really as native as swift and java? I like  xamarin and have used it before but I still hear about how Java and Swift are still better performance wise. ,2018-06-15 23:06:31
425,I was doing Xamarin and then discovered Ionic...my HTML/JavaScript skills were stronger than C# and I really like it.,2018-06-15 23:16:37
426,"Totally identify with your opinion and downvotes.  My comment got the same treatment.

It may be am Android sub , but its clear its clear that Xamarin is not welcome here.",2018-06-15 23:50:17
427,https://www.altexsoft.com/blog/engineering/performance-comparison-xamarin-forms-xamarin-ios-xamarin-android-vs-android-and-ios-native-applications/,2018-06-16 00:13:49
428,"Yeah, I know Im lacking in those areas too (devops, testing, source control, coding conventions). I use git but not in a collaborative way. There are a lot of things where I know its a thing, but I dont know what it is. I only just started branching and merging recently haha. 

Having an recognised certificate in the meantime before I complete my degree is a good idea, I just didnt know where to get one. Im not sure my Lynda.com certificates hold much clout hahaha. Ill give Xamarin University a look. 

Yeah, Im definitely going to come to DDD. Maybe Ill see some of you there - Ill be the one standing in the corner not making eye contact",2018-06-16 02:24:02
429,"I made a Xamarin.Android app as a companion to a WPF app I made. That was pretty cool. Concerning UI, you I made it the native way, with Activities and Layouts, which in my opinion is a convoluted procedure.

I wanted to expand to macOS and potentially iOS, and at this point, I didn't want to have to add two new versions of UI for these platforms. Handling UI and events between WPF and Android was taking me long enough already. I decided to try Xamarin.Forms.

Xamarin.Forms allows you to take a WPF/UWP approach to creating UI for all of your target platforms. I used UWP and Android as debugging targets and replicated my existing UI for Xamarin.Forms. I was quite impressed when I loaded up the mac and ios projects and they just worked. Pretty cool. I like it a lot.

It still uses the native control for each platform, but Xamarin.Forms only exposes controls that have equivalents on all platforms - so no floating action button for Android. However, you can use Xamarin.Android within your Forms app to draw one of these on the screen, because you have all of the native APIs available.

I think the most difficult thing about Xamarin.Forms is when you're targeting macOS and iOS and need to convert some obj-c to C#. My god, what a painful language.
",2018-06-16 03:55:00
430,"people are using the word native in a lot of weird ways these days, so which way are you using it?
=)

If you are only making an app for iphone or only for android,   then using one of their first class languages will probably be a nicer time overall.  If you want to make one app that runs on both, xamarin will probably be a nicer time overall.

But, it depends!
",2018-06-16 04:07:59
431,"Xamarin compiles to native executables on IOS, it does not on android. I don't know if the net result is that xamarin apps are closer to swift than they are to Java in performance or not.

But the mono compiler is pretty good these days, so it is probably fine.  Pokemon Go used it for instance, a really old slower version!


",2018-06-16 06:12:49
432,"Mono/xamarin use .NET core anyway as their base since they were bought by Microsoft, I recommend using core since its more up to date than the old monodevelop libs. ",2018-06-16 10:35:40
433,"Sorry, I realised it was a really dumb question that I asked after not getting much sleep and I thought that the /r/csharp subreddit would be better without it as I don't think it would help anyone else. I had essentially completely forgotten obvious things that I already knew about Mono / Xamarin",2018-06-16 11:45:51
434,"Native usually means that it compiles to binary and has access to all(most) of the platform's API's. Xamarin is considered native because it compiles to binary for iOS, and I believe for Android it compiles to Java intermediate code that can run on the JVM. Xamarin also gives you access to the data types and API's of each OS.

If you have the desire to learn Xamarin and need to make both iOS and Android versions of an app, then yeah Xamarin is a great choice.",2018-06-16 12:01:24
435,"If you are having trouble finding resources for C# dealing with basics and interface, Bob Tabor has a video series on the Channel 9 website. It would be Windows 10 apps. I think if you subscribe to the free Visual Studio Dev Essentials program you get free Xamarin training too. Otherwise I found Microsoft Virtual Academy to have loads of resources and their documentation is top notch with usage examples, all you could ask for. ",2018-06-16 12:18:26
436,"It is an improvement but I still prefer Androids version. I dont like how every single notification in the group takes up 1 large bubble whereby on Android it is just a single line of text. Something like this...
https://docs.microsoft.com/en-us/xamarin/android/app-fundamentals/notifications/local-notifications-images/02-notification-drawer.png",2018-06-16 13:24:57
437,Do you know about any other popular apps created with Xamarin? I have always wanted to know who's using it. ,2018-06-16 14:44:08
438,"We used Auth0.com in our Xamarin app, got it working within a day or so.   Others might have better suggestions, but this worked for us",2018-06-16 16:22:58
439,"When I open the .exe on mac it opens up xamarin profiler not the console, any ideas why?",2018-06-16 23:15:42
440,Is that on visual studio or vs for Mac? Vs for Mac is a port of Xamarin Studio and its pretty different in terms of functionality. ,2018-06-17 00:46:22
441,"Code AND knitting both.  Sigh.

Currently trying to decide whether to buckle down on Xamarin or throw up my hands and learn Unity.",2018-06-17 03:21:54
442,"Agreed, if only the IDEs I need would run on it.  Fortunately theres Visual Studio code for .NET Core, but nothing yet for Xamarin.",2018-06-17 07:21:42
443,"I think that a  lot of internal business apps are made in xamarin.

(From a guy who has experienced the pain of maintenanibg such apps)",2018-06-17 10:10:25
444,"Xamarin supports 100% of the native functionality, as far as I'm aware. I can say from experience that it supports Android shared preferences, which is where you are supposed to store settings on Android.

For WPF and macOS projects I personally use a text file to store my settings. I don't use WPF settings because they are lost on upgrades.",2018-06-17 10:17:39
445,Xamarin.Android and Xamarin.iOS are just fancy wrappers/bindings around the Android and iOS libraries that allow you to use them in C# so you will get performance that is very very close to what you will get with developing them in thier respective languages.,2018-06-17 10:28:49
446,"Oh my bad, I meant Xamarin Forms.",2018-06-17 10:52:07
447,Xamarin forms only concerns the UI. Everything else is the same.,2018-06-17 11:10:24
448,"What I'm saying is that since Xamarin supports everything natively, you can use the native settings, like shared preferences on Android. You said in your post that native settings aren't supported, but they are, like everything else native.

There isn't a built-in cross-platform settings API, because that's not the job of Xamarin.Forms, its job is to handle UI.

There is something you can try on NuGet, called the settings plugin, which you seem to already be aware of: https://github.com/jamesmontemagno/SettingsPlugin

This plugin uses the native settings on each platform.
",2018-06-17 12:02:03
449,"We also have Xamarin.Essentials which includes a cross platform API implementation of native platform settings APIs. It's in prerelease currently but very solid (the only real risk at this point is some API changes when it goes to a stable version).

I'd highly recommend using this as it will soon be included in most new project templates and considered the out of the box supported approach for doing basic xplat things in Xamarin apps.

https://github.com/xamarin/Essentials/tree/master/Xamarin.Essentials

Disclaimer: I'm the engineering lead for the project.",2018-06-17 12:55:00
450,Thats really cool. Im just getting into mobile development with Xamarin and I would be so proud to see that number. Awesome job.,2018-06-17 16:37:28
451,I also recommend using Xamarin.Essentials. Some of it is based on James Montemagno's plugins and he was responsible for releasing Xamarin.Essentials.,2018-06-17 17:12:15
452,"There are definitely alternatives like flutter and xamarin, it all depends on what your goal is. If you want to make an app that will really only work on android then go with android studio, but if the app doesn't use many OS-specific features and not graphic-intensive then why not try something that will work on other devices too?

Personally, I used Android Studio, it seemed like the best approach as I already knew Java and it uses a lot of Android-only features.",2018-06-17 18:00:58
453,"hey again, thanks for replying so fast :D then I guess I will look further into it. Maybe I#ll go with Xamarin thanks a bunch!",2018-06-17 18:08:43
454,"Alright! As far as I know, deciding between React Native, Xamarin and Flutter is hard, and it really depends on what your needs are. Mind sharing what you want to do?",2018-06-17 18:23:31
455,"Do you want to make smartphone apps? 
In that case, you could go with Java for Android or Swift for iOS. You could also go with C# and make apps for both with Xamarin. 
",2018-06-17 22:37:48
456,"> It seems Microsoft forbid them to make Windows builds after they bought Xamarin.    


I can't find anything that suggests this is true on any front, can you provide information?  


I've never used MonoDevelop, [but their website roadmap still points to 2010?](https://www.monodevelop.com/archived/developers/roadmap/) Are you sure it hasn't been dying for along time?

Regardless what are you developing, can you provide us more information?  
",2018-06-18 09:44:20
457,"> while I write ~~java~~ ~~Objective-C~~ C# for the world's most popular phone.

Let me tell you about Xamarin",2018-06-18 12:23:26
458,"This could be said about Microsoft et al since 2015. Look at how Windows progresses, the way Microsoft handles their development business (open sourcing .Net, Visual Studio Code for Mac and Linux, TypeScript, Xamarin, et cetera), and even the rest of their software stuff... They're kinda becoming what Google was in their actual ""don't be evil"" period.",2018-06-18 13:48:17
459,"It is painful. When I was developing a Xamarin app about a year ago, about half of my build/compilations issues would be resolved just by restarting the IDE (Xamarin Studio at the time) and deleting the bin/obj folder. It was pretty annoying.",2018-06-18 14:07:03
460,"Not an expert so take this as a grain of salt...

Do you want to build iOS apps? If so, do you have a powerful mac? Otherwise, building/testing the app is going to be dog slow.

If you're building a simple app (ie: not a game) and don't mind JS, I would try React Native or Ionic. You won't need a mac and because the way how it works, you don't need to actually compile in the same sense you have the compile a Xamarin app. The JS code is built/compiled on the fly by the JS engine.",2018-06-18 14:20:16
461,We've been using Xamarin Native.  I've also heard good things about React Native.,2018-06-18 15:15:24
462,"That's not what I am saying.

Visual Studio ships with its own set of emulators:
https://docs.microsoft.com/en-us/xamarin/android/deploy-test/debugging/visual-studio-android-emulator

those are the ones that work with hyper-v

Pretty sure you are using the Google Android emulators
https://developer.android.com/studio/run/emulator

Those work with HAXM

You can have one or the other if you want hardware acceleration or you can try the new preview I suggested.

for what it's worth, i have no use for hyper-v. i have it disabled on my windows instance and use haxm. it works fine.
",2018-06-18 18:02:58
463,They are recommending use android ones - https://university.xamarin.com/resources/how-to-install-google-play-on-android-emulator,2018-06-18 19:28:28
464,"Oh great, those are really essential, thx. And now Xamarin forms becomes really cross platform, great work and please keep extending it to cover more things, including UI elements, like check boxes, floating button, tree view etc.. because we need to use really dirty work-arounds otherwise.",2018-06-18 19:48:17
465,"Pro non-entry dev here that is disagreeing. You could use Macs Xamarin-based VS to write .NET Core apps, which are the only things that could stop you from going MacOS for programming. Anything else can be fixed with brew and getting the protools from Xcode. ",2018-06-18 20:53:22
466,I recommend taking a look at Xamarin University free videos https://university.xamarin.com/welcome or any other introductory course. ,2018-06-18 23:20:31
467,"I'm using Visual Studio for Mac, I don't know if there is a way to enable warnings and errors for XAML on this IDE. Debugging is with Xamarin is awful currently, deploying to Android take ages, and iOS sometimes won't show any information at all in the log. I'm doing it because it's still much better that maintaining separate projects, one for each platform, with different tooling and whatnot.",2018-06-19 01:38:48
468,"yeah the tooling for Xamarin is pretty trash compared to native.

I haven't found deployment too bad but what are you comparing it too?

What do you mean information in log for iOS? You can make the output more verbose. For on device logs you can use the device log on the simulator.",2018-06-19 01:45:22
469,"> look into the flutter framework to have a unified code base for mobile.

You could also try Xamarin/Xamarin Forms, especially if you are a fan of native experiences.
",2018-06-19 02:57:11
470,"Xamarin.Essentials is not going to do much with cross platform UI, and though it compliments Xamarin.Forms nicely, it can be used without Forms entirely. 

We will keep adding more features, some of which will have minimal user interface interaction (for example we want to include photo/video picking/taking functionality which requires some UI interaction), but generally we won't adopt features that revolve specifically around UI as we feel those really belong in Xamarin.Forms.",2018-06-19 03:09:19
471,"Chill with the downvotes man, I dont know how you read what I wrote as saying you could use anything to write iOS apps, Im saying for software development a Mac could do everything this guy needs. You had to pull an extremely esoteric example of something WinVS could do that Xamarin couldnt.

In my environment, if I found myself in the unenviable position of writing KMDF stuff, Id have to do it in a test environment with EWDK.

Sorry I disagree with you, but your Hail Mary to ad hominem reveals more about you than me.",2018-06-19 03:35:33
472,I dont care if you agree. Downvote is for disagreeing with using the best tool for the job. Telling a noob to use xamarin isnt going to help him learn to code efficiently IMHO. and I used personal examples that didnt require any thought at all. ,2018-06-19 03:46:02
473,"I think youre way over complicating the question. Youre talking about someone who hasnt decided whether or not they want to program in Python or Java first. The probability of ever caring about writing Windows kernels in the lifetime of this computer is slim to none. If your rationale is pragmatism, I dont see how using a system that is going to require Putty to do several intro tasks is going to be the choice. 

Im not telling him to use it, but VS exists on Mac. Its Xamarin-based, but it can do most everything a Windows dev would need. Ive written .NET core apps and used both OSs. 

If hes trying to learn, use something with a native BASH terminal, native *nix architecture, and plenty of resources out there. MacOS wins there.",2018-06-19 04:15:35
474,"Ahh not sure about runtime but build you can get more information.

Not familiar with game engines and xamarin etc",2018-06-19 05:34:27
475,Pretty sure that's what Xamarin.Forms is attempting to do. Isn't it? ,2018-06-19 06:08:01
476,"yea, but i think that is a stopgap. of course, xamarin has been around for a while, but i feel .net core is the future of .net and will replace mono completely. also, wpf is much more capable than forms.",2018-06-19 06:14:03
477,"Xamarin.Forms, despite the name, is not at all related to WinForms and is more like WPF, it even uses a version of XAML. Xamarin also isn't limited to mono. It is used due to mobile compat, where core doesn't work too well currently, and (for now) bigger API selection.",2018-06-19 10:23:43
478,"I'd suggest Xamarin. It's mostly C#, which is ""kinda"" similar to Java. I suggest you read a bit more about it.

https://docs.microsoft.com/en-us/xamarin/",2018-06-19 11:41:43
479,"Great app.  What's your plan for the native app? React Native, Ionic, Xamarin? or do you mean really go native and use Android/Kotlin and then iOS/Swift?",2018-06-19 13:21:25
480,https://docs.microsoft.com/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?tabs=vswin#hyper-v here is some documentation on this feature,2018-06-19 15:30:43
481,Not gonna happen :) weve just moved from Xamarin to native!,2018-06-19 18:07:08
482,"As others have said, C# is closest to Java. I have developed in the Xamarin environment (C#) and Android Studio (Java). My experience is that Android Studio is much more mature and robust. There are some frustrating parts about using Xamarin, especially when in comes to the layout designer. The benefit of Xamarin is that it is supposedly to allow cross platform development. So, if you are developing strictly for Android, and just starting out, Android Studio is a better option. And its free.",2018-06-19 18:20:11
483,"They are moving back to and doubling down on native.

According to the article the Android/iOS communities are bigger than the React.

As for alternatives they didn't discuss/mention other alternatives like Flutter or Xamarin, so no conclusions there.",2018-06-19 20:11:05
484,"No.

There's a lot more options like xamarin, ionic, flutter, phonegap/cordova. I wouldn't say they are better as such. Depends what you are after.

I'm massively opinionated (love RN) but I wouldn't touch anything webview based like ionic/cordova/phonegap. It's like react native but having to rely on HTML to make things look native - just yuck and slow.",2018-06-19 20:44:22
485,"Totally agree. Xamarin sounds like a maybe (it's pricy, right?). Ionic/cordova/phonegap: from my experience: yuck; hated working with them. ",2018-06-19 20:46:34
486,"Again....im biased. I have been through a lot of supposedly amazing cross platform development tools in my years and I really love the idea of  a perfect one. There isn't. RN isn't perfect it's just better than anything I've seen and has a massive community following.

Xamarin has had 7 years to gain traction and it hasn't. I can't think of a single decent app built on it (happy to be disproved). I do have some friends with niche businesses who have launched xamarin apps in the past but they're for odd things in odd industries (B2B) where the customer doesn't care what the app looks and feels like as long as it works.",2018-06-19 20:52:14
487,"I think it depends what you're doing. A lot of clients want applications that are simple enough to handle using React Native or Xamarin. But some applications aren't suited for it.

Airbnb was using their own fork of RN... When you have to fork and develop on your framework that's a good sign that what they were trying to do was outside the scope of the framework.",2018-06-19 22:38:27
488,xamarin is also a pretty good option if you want both apps fast and cheap. I still prefer native though.,2018-06-19 22:56:53
489,"Sure there is a lot of great resources on the official site.
https://www.asp.net/mvc

Stackoverflow and gitter is another good place to get information/ask for help.

Also be sure which flavor of asp.net you are learning:

* ASP.NET MVC (full framework). This version only works on windows and requires the .net framework to be available on your dev box and server.

* ASP.NET Core . Newer, open source and cross platform .net. This runs on windows, macos and linux. It's SUPER fast and for the most part compatible with ASP.NET MVC, with a few minor tweaks.

* ASP.NET WebForms . This is an older technology and like ASP.NET MVC (Full) requires .net on dev and the server.

It's also important to distinguish between .NET and ASP.NET. A lot of people lump the the two together but they are not the same.

* .NET : Is the language runtime used to execute programs written against the .net stack. With the full .net framework you can build anything from web applications (asp.net) , desktop (wpf, winforms), mobile apps (xamarin, universal apps) and more. Think of .NET as an engine that can run a multitude of different application frameworks.

* ASP.NET: Is the specific libraries and frameworks used to build Web Applications using the .NET framework. 

So in a nutshell ASP.NET , needs .NET (or .NET Core) but .NET itself does not require ASP.NET.

I hope this helped!",2018-06-19 23:36:08
490,"Native development sucks. Developing for Apple is a nightmare with the worst dev tools about which the only kind thing you can say is at least Swift is better than Objective-C. But then again stabbing your eyes out with a rusty fork is better than Obj-C. And Apple dev is expensive.

Android is still stuck with Java, hundreds of MB's of sdk's and poor debugging.

The tooling doesn't even being to compare to webdev.

Flutter is a real contender but Google tools aren't considered cool, unlike FB, so it'll never catch on. Xamarin/C# is also much better.",2018-06-19 23:47:11
491,"Actually, Xamarin isn't too bad. Most of the base code runs on the .NET VM and is pretty reliably separate from actual platform bugs. It's slower than native, but works in a pinch.",2018-06-20 02:34:54
492,"It's a ""better Java"" in every way, the dotnet industry is big (as in, csharp programmers get decent jobs).

Microsoft is more and more open for quite a while already, dotnet core is a nice cross platform environment, xamarin gives you mobile development for all devices.

Personally I do like F# quite a bit too, but that's a different thing..",2018-06-20 02:40:55
493,I bet you bragging rights that microsoft makes it free. They have tfs free (can use git) for small teams and private. They made xamarin free and that stuff was expensive ,2018-06-20 03:51:22
494,"Your C# code (typically*) first gets compiled to IL (short for intermediate language) by the C# compiler. In Javaa world, the equivalent is known as Bytecode. This first step is done by Roslyn these days, and typically happens while youre in VS. Simply put, it turns your `.cs` into a `.dll` or `.exe`.

But IL doesnt actually run on your CPU. When executing the code, an additional step of compiling from IL to machine code is required. This happens just-in-time, or JIT, which is a bit similar (but not the same) as how interpreted scripting languages work: as a section of code needs to be executed, the JIT compiler Sees if it already has a cached machine code version for that, and if not, generates that. Again, this happens as your code is running, which can lead to some performance issues but these days is pretty smart (and can in some cases even be faster than the traditional approach).

Now to the article. Because its machine code, it matters which architecture were talking about, including whether its 32-bit or 64-bit, and .NET currently cares about x86 and ARM. That leaves us with a grid of four targets: x86, x64, ARM32, ARM64. For historical reasons, there used to be *different* JIT compilers for the two x86 variants, and they started trying to unify that nine years ago. That effort is finally coming to its end, which means a much simpler codebase as more stuff gets shared, and more optimizations can get used across architectures.

Or, in a nut: .NET tooling is getting a bit faster, leaner, cleaner, more unified, more able to grow in the future.

*) There are exceptions. For example, .NET Native directly runs natively. Also, when using Xamarin with an iOS app, native code also gets created in what they call AOT, for ahead-of-time compilation.",2018-06-20 04:03:39
495,Rdio was a Xamarin app,2018-06-20 05:44:03
496,">I am also making my feet wet with Flutter. In the beginning i wanted to evaluate the current status of Flutter and under what circumstances it is possible to use Flutter against a native implementation. I must address here, that i am very opposed to non native approaches. I tried a few things in the past years (Titanium Appcelerator, Xamarin, React Native ... ) and the experience was mostly bad. Except for Xamarin i was always bitten by things that do not work properly or that are unsettling difficult to achieve. In the case of React Native there is also the documentation that is often out of sync and it is impossible to track issues because they are constantly closed (without a fix) and ""cloned"" by someone still having the issue.   
>  
>  
>  
>With that Background i started with Flutter with a mindset like ""Ok Flutter  show me how bad you are"". At the End of the day i was very impressed how well things went. Flutter was incredible easy to setup and my first setup worked in a matter of minutes. Impressed by that i started to port an app that we currently doing both native in iOS and Android  just to see how far we can push it. And we can push it really far with Flutter. It went so flawless and was done in a fraction of the time the native approach took us that we're really considering to switch to Flutter. Looking in what limited environment we could use Flutter ended up questioning why we should continue to use a native approach. We are still investigating this and really want to find ways to poke holes into Flutter but besides Webviews/Maps/Camera (that currently do not work really well but work is on the way) we can't really find arguments against Flutter. It looks really well designed with all the problems the native platforms have in mind to not recreate them.          ",2018-06-20 05:48:24
497,"Can confirm. It's probably the future, unless Google completely fucks it up. 

Flutter addresses most pain points that I had when using Xamarin (which seem to be the same for RN).",2018-06-20 06:33:22
498,"Ive been working as a native app developer since 2009. This has been happening over and over in companies. I even was hired sometimes to port Phonegap, Cordova o Xamarin apps to native for various reasons (mostly performance and what they talk in this articles). ",2018-06-20 06:42:01
499,Mono and Xamarin are not popular and for very good reasons.,2018-06-20 06:51:12
500,What were your pain points with xamarin?,2018-06-20 07:10:04
501,"1. Bugs caused by leaky abstractions: you would experience iOS bugs, Android bugs and Xamarin bugs at the same time.
2. Painful customizations: anything custom required Android and iOS specific code and knowledge of their frameworks.

Flutter solves that but not using native frameworks, so you can customize everything you want and it won't break on some shitty specific chinese Android. It can also run UI tests headless, on desktop without any device / simulator needed.",2018-06-20 07:16:00
502,"1. This will be an issue with anything but native code to that platform. People are now really forgiving because it's the new shiny thing and most only wrote hello world in it (and because oh it's just v1).     
2. Then use a library to abstract platform specific stuff like Xamarin.forms",2018-06-20 08:04:10
503,"1. You are wrong. Flutter ignores native UI components. For this reason you are mostly dealing with Flutter bugs, except for stuff like camera and sensors (but these have much smaller surface area than entire UI library).

2. I was talking about Xamarin.Forms. For example you can't remove border around Entry without touching native classes. In Flutter you can implement basically any custom UI that you want. I did a clone of iOS lock screen (complex animations with blur and scroll position synchronization) and it wasn't too hard.",2018-06-20 08:15:16
504,That's debatable statement. In my opinion Xamarin is surprisingly popular.,2018-06-20 09:02:43
505,"Yup. Also another their own platform. [channel9.msdn.com](https://channel9.msdn.com) .  


And other benefits after getting Visual Studio Essentials at [https://visualstudio.microsoft.com/dev-essentials/](https://visualstudio.microsoft.com/dev-essentials/)

* LinkedIn Premium (business, tech and creative)
* Pluralsight (cloud, design, security, mobile and data)
* Data Camp (data-science and AI)
* Opsgility (cloud-focused)
* Mobile training on Xamarin University
* WintellectNOW (app development)",2018-06-20 09:12:11
506,Xamarin is free.,2018-06-20 10:09:40
507,"For xamarin forms:

Xamvvm
Fluntvalidation
Fluentassertions (in unit test project)",2018-06-20 10:31:03
508,"That's true. Even during 1st year of my undergrad I didn't know about many things Microsoft was providing at my school including  ***free*** multiple windows keys, Office 365, Visual Studio professional and many more per student. I learned about these benefits by my own.

>  I'd like to know what they are myself 

Here you go

[https://aischool.microsoft.com](https://aischool.microsoft.com/) 

[https://mva.microsoft.com/](https://mva.microsoft.com/)

[https://www.edx.org/school/microsoft](https://www.edx.org/school/microsoft)

[https://channel9.msdn.com/](https://channel9.msdn.com/)

[https://www.microsoft.com/en-in/learning/training.aspx](https://www.microsoft.com/en-in/learning/training.aspx)

[https://www.microsoft.com/en-sg/learning/default.aspx](https://www.microsoft.com/en-sg/learning/default.aspx)

And other benefits after getting Visual Studio Essentials at [https://visualstudio.microsoft.com/dev-essentials/](https://visualstudio.microsoft.com/dev-essentials/)

* LinkedIn Premium (business, tech and creative)
* Pluralsight (cloud, design, security, mobile and data)
* Data Camp (data-science and AI)
* Opsgility (cloud-focused)
* Mobile training on Xamarin University
* WintellectNOW (app development)",2018-06-20 11:01:43
509,"I'm surprised that xamarin is absent, developing cross platform apps is awesome ",2018-06-20 11:50:29
510,"Agreed! That's why I mentioned Xamarin in the precursor to this article. You can find it [here](https://fluxmatix.com/en/blog/10-reasons-why-csharp-is-alive-and-kicking-in-2018)

:-)",2018-06-20 11:52:38
511,"As an old developer, my perspective is a little different. I avoided ReactNative for two reasons:    
    
1. I really didnt like it, although the concept was technically interesting.   
2. Weve played this game before.   
    
Every cross-platform GUI framework over the years has produced less attractive apps than native frameworks. Theyre fine for internal or vertical market apps that need to be cross-platform, but if your goal was to create great applications it was better to avoid them.    
     
In addition, most 3rd party SDKs eventually disappear, leaving you to maintain them or, if not open source, rewrite everything. Choose your business partners wisely - they are worried about their business, not yours.   
    
Weve looked at a lot over the years:   
Java AWT and Swing. Cordova. OpenDoc. Galaxy. Qt. Cocoatron. GTK. JUCE. WxWindows. Xamarin. zApp. Browser-based wrappers. And of course XWindows. (This doesnt even include single platform ones like MFC, MacApp, Powerplant, OWL, and others)
      
The one that does make sense to me, and I do recommend for a certain subset of developers/games, is Unity.    
    
The holy grail of write once, run everywhere is still a bit of a pipe dream, at least if you want the best look, performance, debuggability, and immediate support for new platforms and changing ones.     ",2018-06-20 11:57:46
512,"Perception of C# in the developer community outside of C# developers is worse than it should be. It was labeled for most of it's life as a Windows specific tech (even though that wasn't true even before .NET Core, because of Mono, Xamarin, and Unity).

Developers were calling it dead when Windows desktop application development started to struggle, and Microsoft's web development technologies were starting to show age. Even now the .NET ecosystem  is still behind in open source machine learning and distributed computing libraries and systems. Anyone paying attention can see that has gotten much better for .NET in the last year or two, but it still has ground to catch up on and public perception from those that aren't already using .NET lags (in some cases it has significant lag).

We care what they think because most of those developers don't realize that C# + .NET Core is probably one of the best cross platform open source stacks, and increasing developer community size is the easiest way to maintain a high level of maintenance and velocity for an open source platform (it keeps giving us good patches and modern libraries).",2018-06-20 12:13:39
513,"Do you have any evidence? As someone who has actually worked with UWP in Xamarin contexts, and specifically worked with the Store API, I can tell you that every Store context going back to updates before 1511 are still present in the libraries included in 1803. This is because there are lots of things on the WinStore that will never be updated, so you have to continue serving all those old APIs, even if the developer keys you issue aren't approved for accessing them on legit apps. As long as you turn on developer mode you have access to every old API on every app, all the time.

Beyond that, Microsoft hasn't released a single store update to address any DRM. They have encouraged developers, especially first party ones, to use newer APIs, but there's no evidence that is related to anti-piracy.

UWP is just buggy, it's just a buggy set of APIs. That's all there is to it. Licensed copies of games on the WinStore break *all the time*. A customer can open it once, maybe twice, but then it won't open again. *Sometimes* downloading another app from the WinStore fixes it, clearing cache in the Settings app almost never fixes it, and the last thing MS can recommend is redownloading the whole thing (almost 100GB download for some games!!!) - so it's very clear even Microsoft doesn't know what they're doing regarding UWP/WinStore support.",2018-06-20 12:14:43
514,"I kind of just avoided because past experiences with hybrid tech turned out to be a waste of time.  I worked on multiple hybrid applications built with titanium, xamarin, and flash.  They all went the same way, I could share some code, but would end up writing a lot of stuff twice anyway.  Things would break whenever there was an update, if the client wanted the latest apple thing I'd have to wait months, and at least in flash's case they basically dropped support after a couple years.  

React Native is def better than any previous hybrid platform I've run into, but everyone I know that's worked with it has complained about the same things I did with previous hybrids.  

Dropbox had a solution of build UI in native and sharing a C++ codebase for all other logic that I've always wanted to try.  Think that's the best way to go.",2018-06-20 14:26:51
515,">I really like this idea. I'm learning Flutter now and one thing I'm finding is my state objects are becoming bloated very quickly. Obviously there's a learning curve with any technology, but I think this makes the code make a lot more sense and a lot easier to search through. Thanks for this!

Sorry, I haven't done any iOS development. The MVVM pattern is quite common in Xamarin, you can find out more about it [here](https://docs.microsoft.com/en-us/xamarin/xamarin-forms/enterprise-application-patterns/mvvm). I have also created a very simple flutter todo app with this pattern [here](https://github.com/edrickleong/flutter-todo-app). ",2018-06-20 14:47:15
516,"I got this error recently too.  I seem to remember incrementing my apps' version numbers in the Android manifest. 

I've also found that Clean Solution -> Rebuild solution is a magic wand that fixes many spurious Xamarin build problems ;)",2018-06-20 14:49:22
517,Xamarin seems to be the only non-JS framework for cross platform mobile development. Why isnt it more popular?,2018-06-20 17:36:40
518,"To add on to what /u/readet and /u/LiamMayfair said, ""Back-end web development"", ""Desktop application developer"" and ""front end development"" and ""Mobile Application development"" are all starting to blur. 

For example, there is a library called Xamarin that allows you to simultaneous build a Windows 10 ""modern"" desktop app and an Android ""mobile"" app at the same time. You can now build true native apps (not shitty Electron ones) in HTML/CSS/JavaScript on platforms that support some sort of byte-code level interrupter like .NET/JVM/Clang/LLVM, Examples include React Native and UWP for Windows 10/Xbox. You also have efforts on the Web to go the opposite direction with Web Assembly which would, in theory, remove the need to have Javascript to write an dynamic site/Web app. You could, in theory (probably in 5-10 years from now), write a Web site in 100% Python+HTML+CSS or even Lua+HTML+CSS. Anything that had a Web Assembly compiler.

The real issue with Mobile/Desktop + Web is that  most of these apps are absolutely nothing special. This means cross platform availability is more important than platform specific features. While a job with ""iOS developer"" or ""Windows application developer"" are in smaller demand than they were before, a general ""software developer"" is far more common now then it was before. Most modern application frameworks abstract a lot of the lower level concepts away so the difference between desktop, mobile and web are slowly removed and personally as a developer, I cannot wait for that to happen.  

Personally, I am somewhere between ""Backend Web developer"" and ""DevOps"", but that has not stopped me from making a fancy Javascript single page app that uses a REST API or a simple desktop app to automate some task. I would say if your interests falls more into general application development, or ""software engineering"", you should find a [hand full of technology stacks](https://insights.stackoverflow.com/survey/2018#technology) you can write apps in that you enjoy working on and are in relative demand and pursue jobs in those. Just because Javascript is mostly for the Web today or Python is mostly for Web/scripting or C# is mostly for X, does not mean they will be in 5 or 10 years. ",2018-06-20 17:42:56
519,"Pretty sure Microsoft bought Xamarin, seems like the obvious choice but who knows",2018-06-20 18:41:42
520,"I was kinda in the same position, except for the Obama part. I worked for a few years as a native Android developer in Java. I love making Android apps, but I'm still young and was interested in learning something new. So switch to a different company where I work as a full stack developer on mobile solution in C#. Besides my job, I was curious in Kotlin so decided do some hobby projects in Kotlin. I think Kotlin is awesome, and I highly advice diving into it. But also C# would be a good choice to play around with. Because it's not to hard, once you know Java and you can create and Android and iOs in xamarin, a webpage using MVC framework and the backend.",2018-06-20 19:12:19
521,"React Native sure exploded out of airbnb. Xaml is everywhere in WPF, UWP and Xamarin. It is not going anywhere.",2018-06-20 19:29:01
522,"google xamarin, only one way to go, but should answer most of your questions ;)",2018-06-20 20:30:42
523,"I would say both eco-systems have good parts and bad parts.

Java has more libraries, runs in more platforms that lack .NET support that embedded devices, SIM, mainframes, phones (even if it isn't proper Java), enjoys GUI frameworks across multiple OS as part of the SDK.

As downsides, up to Graal all good AOT compilers were commercial, prefers to adopt only proven practices, values backward compatibility above all, lacks value types and support for low level coding, prefers conventions over syntactic sugar.

.NET rules on Windows, not so much outside of it, specially regarding available libraries.

The GUI story for .NET Core still is a kind of WIP. There are Xamarin.Forms, Avalonia, Eto, but they all lack the maturity and third party components that Swing and JavaFX have available.

Of course on Windows, .NET GUIs rule vs the Java ones.

C# has lots of nice syntic sugar features, proper value types and generics, the always supported AOT/JIT since the beginning and much better features for low level programming, specially since 7.x.

Also we cannot look at Java and .NET in isolation, we also need to take into consideration the alternative languages on each platform. Koltin, Scala, Clojure on one side and F# on the .NET side.

Personally, I cannot decide between both, hence why always tend continuous alternate between both, some times even on the same project (GUI in WPF, backend in Spring).

Which is ultimately my advice, embrace Java but keep your .NET skills up to date, and wyou will get a broader CV.",2018-06-20 21:20:06
524,"The Android-specific calls still run in the native code, and usually little part is actually ran only on the .Net VM. However that part is really performant.

But in my experience, little of the optimizations of the .Net VM transfer to Android with Xamarin. I just feel it is still sluggish, even if you employ the best patterns using the industry standard MvvmCross and it's supporting dependencies. However it does speed up development since it drops lots of the stupidities of Java and also allows fast reflection on the app itself (since unlike Java, .Net apps compile into their own assemblies, and reflection is ran only on the assembly requested, while Java compiles a single big assembly - even if split to bits using multidex).

It's a great tool if you want a small and maintainable project that targets multiple platforms, share lots of logic, but UI needs to be platform-specific.",2018-06-20 21:37:14
525,"Microsoft didn't used to have any official GUI framework for cross platform so probably just a few should be using any...

Xamarin can target Linux and MacOs now, but considering how new this is, probably just a few company's are using it.

Another one is Avalonia Ui, also xaml based, so should be really easy to get used for someone coming from wpf or xamarin and it runs on .net core, but not officially supported.",2018-06-20 21:44:18
526,Is no one gonna mention Xamarin lol,2018-06-20 22:09:03
527,"Personally, I wouldn't put a lot of effort into Flutter. First off it simply isn't used by companies, at least not outside of San Fran. Secondly, it is being developed by Google who is notorious for losing focus on projects and just dropping them completely. 

For what you are wanting to do I would first focus on learning iOS. If you want to do freelance you are going to need to do both as most client will want both. I would suggest first getting familiar with Objective-C/Swift because you'll find more documentation for those languages than anything else. Once you are familiar with the native development I would suggest finding a cross-platform tool. That could be Flutter if you trust Google, but with your background I would suggest Xamarin. Xamarin allows you to use the native APIs in C#, but also offers Xamarin.Forms for 100&#37; cross-platform UI. Although, do be warned Xamarin does have some quarks to it that can trip up newcomers, but those are quickly becoming a thing of the past.",2018-06-20 22:13:47
528,"The main benefit of C/C++ on Android is the ability to use existing code, as there are very many great portable libraries out there written in those languages. If you're looking to create portable software, C is the best choice (C++ second best).

But that's pretty much it. Sure, you can achieve greater performance with C++ than in Java, but for the vast majority of programs, Java is more than fast enough (even for most games). Plus, you're required to write some boilerplate in Java anyways, so using C++ in an Android project always means that you'll have to manage at least two separate code bases.

But that's a topic for when you have more experience. Starting off, you'll be better off learning to write Java and working with the native Android APIs. That will teach you a lot about how Android itself works, which is very useful.


Btw, if you don't care that much about Android specifically and just want to make apps, there are many ways to do it nowadays besides the standard Java route. Examples:

 * https://flutter.io/
 * https://www.xamarin.com/
 * http://reactnative.com/
 * https://www.qt.io/mobile-app-development/

and a shit load more. Just do a Google search for ""how to make apps with <insert favorite language here>"" and you'll probably find something.",2018-06-20 23:32:14
529,From my experience Xamarin is horrible to maintain. ,2018-06-21 01:06:55
530,"Xamarin Forms is actually really nice once you get it up and running, and I expect it to just keep improving. It's an easy sell to management that might be interested in mobile development. ",2018-06-21 01:34:59
531,Is Xamarin better?,2018-06-21 02:36:54
532,Any plans for remote build host and remote iOS simulator like Xamarin has? Would allow iOS development from within Linux/Windows.,2018-06-21 02:42:19
533,"Yeah, but it isn't officially supported and have some limitations.

See the FAQ: https://www.mono-project.com/docs/faq/winforms/

Mostly should be okay, but forms is considered as ""legacy"" and no new features will come for it, only bug fix, if any is found.

If you are doing basic tasks than forms should be more than enough, but xaml GUI s are the mainstream, either by WPF, UWP, Xamarin and AvaloniaUI.

I highly recommend one of those, especially Xamarin as it can also run on Mobile, so it's an plus.

AvaloniaUI should also run on mobile, but never seen any project using it for mobile (I would love to see an sample )",2018-06-21 03:37:23
534,"I am, but I'm learning C# to do so via Xamarin. I want to Target both Android and iOS with an app. ",2018-06-21 03:40:21
535,"I know how you feel, and this has been my issue with .NET and Microsoft in general the last decade. Forms was widely adopted, then they brought out WPF, only to change directions shortly after with UWP, and it's hard to imagine this being THE thing Microsoft commits to, for reasons mentioned above. Personally wouldn't invest myself in UWP, but Xamarin's seemingly is showing the most (immediate) promise imo.",2018-06-21 04:45:10
536,you can develop windows application with xamarin ? ,2018-06-21 06:11:59
537,I have nightmares of the xamarin designer in visual studio ,2018-06-21 06:16:27
538,"Eh that depends, there's no lack of Google projects that have very quickly failed because no one gave a shit about it. Flutter at least has a very dedicated fanbase because it solves the problems that React Native and Xamarin don't",2018-06-21 06:33:54
539,"I initially learnt app dev for Android (Android Studios) via youtube videos, and started off with building the usual email/password login system since you'll learn how to set up & store/fetch data from your database too. 

I think [this link ](https://medium.com/mindorks/how-to-learn-android-development-f33dd6dba40d) from medium did a great job at explaining what to look out for when learning android app dev. 

Alternatives for learning app dev without android studios to a certain extent would be React Native. I'm not too sure about Xamarin as I personally have never used Xamarin before. Codes written in React Native is cross-platform deployable. Since you're starting out, use React Native + Expo, it will help you out q a bit as compared to Native Codes. 

You can drop me a message if you need help at any point in time! I'm sorry if my answer was messy, but feel free to clarify w me anytime :) ",2018-06-21 06:43:27
540,"We create unmatched professional experience, innovative and highly customized Mobile app development services fro i phone , iOS Android Apps, i Pad, Xamarin and Microsoft Window Mobile

ComX NZ Limited

84 Halesowen Ave, Mount Eden, Auckland 1041

Tel: 09 889 2255

Email:[info@comxdesign.com](mailto:info@comxdesign.com)

GST Number: 109-027-022

Company Registration Number: 3794216",2018-06-21 07:08:46
541,AFAIK objectiveC is normally used for IOS apps and java for Android apps...xamarin uses the .NET framework which means C#.,2018-06-21 07:35:56
542,"Basically, because both RN and Xamarin heavily rely on native components in order to get a native feeling and performance they need to be an abstraction over both the Android and iOS platforms, and like all abstractions they are very leaky.

Flutter says fuck that and instead of depending on native components, it instead includes a rendering engine which is responsible for rendering everything natively. So instead of being an abstraction on top of the view and rendering level, it's just an abstraction over the base Android and iOS SDK",2018-06-21 08:10:15
543,"We have had UWP support for a while now, Xamarin recently introduced GTK and WPF support in Xamarin.Forms 3.0. Xamarin.Mac has been around for a while.",2018-06-21 08:43:21
544,"UWP is useful for Xamarin.Forms apps as well as for developing UI for Windows IoT (e.g. on a RaspberryPi); it's definitely not a dead end. I wouldn't necessarily suggest someone expect to do ONLY uwp, but it's still a useful tool in your tooolbelt",2018-06-21 10:25:18
545,"WPF and desktop apps are definitely past their glory years. All the hype now is Xamarin, web technologies and Microsoft trying to push UWP.

Having said that, UWP sucks and web technologies are not nearly good enough to replace a WPF desktop app on Windows. I'm talking about tech like Electron where you can build a desktop App with HTML/CSS/JS.

The best tech to build a desktop App on Windows is still WPF.

As far as jobs go, there aren't too many startups doing desktop development. But, last time I looked (I live in Israel) there are still plenty of WPF jobs in the market in mature products.",2018-06-21 10:53:29
546,"Probably because a Hello World app that would be 0,5 Mb on Android (What the fuck Android?????????) would be 15-20 Mb with Xamarin.",2018-06-21 12:47:09
547,"C# and WinForms

You can hack together a terribly coded project in hours... But it'll work. WinForms is dead simple for the basics.

If you need / want more structured code and portability to different platforms then C# and Xamarin are the way to go. You can target Windows, iOS, Android... Even Mac and web (though these are community supported).",2018-06-21 13:20:44
548,"For the 90% of apps out there, UI is the 90% part of the app, so Xamarin doesn't really help. And, Xamarin.Forms has a bad reputation.",2018-06-21 15:13:41
549,"No, it isn't. The three apps share the same feed of news, but Windows' code is regular UWP while iOS and Android share their code using Xamarin. I might be wrong, though.

Same mother (info) but different fathers (code).",2018-06-21 16:13:37
550,"I've never done c++, are the error messages anything like xamarin forms?",2018-06-21 16:18:55
551,"Everything we need to know about Xamarin:

(1) Microsoft.",2018-06-21 16:43:10
552,"This question. Isn't really a C# question, it's more a iOS/xamarin question. I can't help as I don't know iOS device very well at all (just enough to recognise the class names, basically) and I expect lots of people here won't. I'd ask over in /r/xamarin, I expect you'll have more luck there.",2018-06-21 17:07:59
553,"Thank You very much and yes I am really just starting thank you very much anyways, I'll check in xamarin. thank you!",2018-06-21 17:18:32
554,"I've never done Xamarin, but the errors in C++ are usually very vague.",2018-06-21 17:20:56
555,"I'd say this field is really hard to judge.

The technology MS supports the most for Desktop apps right now is UWP. WPF hasn't received major attention in as long as WinForms hadn't received it when WPF released. 

That said, the fundamentals of WPF are the fundamentals of UWP, so if you gain skill in one you'll find the other familiar. These kinds of ""markup + code"" framework are becoming very popular, so learning how to handle that's pretty good for your career.

Where WinForms is alive and kicking is in the same space that VB6 is alive and kicking: internal enterprise apps no one talks about or gets excited about. I'm sure there are plenty of prospects there, but they aren't fun ones. 

What I hear from friends who still do VB6/WinForms development is that the world is starting to demand either web or mobile apps in place of what they've been used to doing. Many of them have started either considering retirement or studying frameworks like Electron and Cordova. On that front, MS is pushing Xamarin Forms pretty hard, which is an offshoot of WPF and more like UWP.

However, as a Xamarin Forms developer, I think you might be happier if you focus on UWP or WPF for now. I'm not sold that MS believes in Xamarin Forms. I know for sure Visual Studio for Mac is hot garbage. It's not really ""free"" to be a Xamarin dev anyway. So if you believe in the MS stack, your best bet right now is to look at WPF and UWP and *stay current*. Things are changing very quickly and the people who keep up will be the most well-rewarded.",2018-06-21 17:39:19
556,In xamarin forms it's either InitializeComponent does not exist in the current context or timeout exceeded in getting exception details,2018-06-21 17:55:42
557,Looks weird to me that view model imports UI library. My Xamarin VMs were platform agnostic. ,2018-06-21 17:57:02
558,WPF + XAML + C# + MVVM is my bread and butter and i make well over the 6 figures mark. that being said its moving to xamarin and web which is too bad IMO,2018-06-21 18:15:33
559,"I started the project alone and chose C#/Xamarin to speed development. This proceeded much slower as C# and mobile development wasnt my skillset, so I stuck to development of our app server and delegated IOS development to Zack and Android to Steve. They have done a fantastic job of creating the native apps",2018-06-21 19:41:17
560,"Hey, can you explain why it's moving to Xamarin? I've been learning Xamarin Forms and didn't realize that it's becoming more popular.",2018-06-21 20:19:32
561,"It lets you play with Google's toys.

That said, Chromium (the parent project behind chrome, which google primarily develops) is open sourced and BSD licensed.

What a lot of people don't realize is that many of the projects that Google develops for use in Chrome, often end up in open source projects because they're a part of chromium and ergo google actively develops, funds and supports them.

PDFIUM found it's way into firefox, Skia is being used by both Microsoft (for cross platform graphics in visual studio because Xamarin) and Mozilla (firefox). Angle is supported by Microsoft and is being used in Edge probably, and Firefox uses it to supplement it's own WebGL support.

As for tangible benefits, unless you're heavily invested into Google services, there's not really any super duper benefit to using Chrome that I'm aware of. I just use it because I have all my settings set to sync.",2018-06-21 23:13:04
562,"Chiming in for MVVM Light. Used it for years in silver light, WPF and Xamarin. Its the shit. ",2018-06-22 00:03:32
563,I have Xamarin on my CV and get SO MANY calls from recruiters. I dont particularly enjoy doing Xamarin so always turn them down but people are desperate for Xamarin developers of all sorts. Forms is big now too. ,2018-06-22 00:05:01
564,"Microsoft's interest is for the most part about enterprise and IOT.

Azure runs Linux, and Microsoft's apps like skype and VS Code support Linux.

They also just bought github, which hosts many open source projects, they own Xamarin, which if you're familiar with KDE, the guy who cofounded Xamarin also was one of the guys who created the Gnome Desktop environment that more or less competes with KDE on linux. Xamarin created an open source project called Mono that more or less mimics Microsoft's .net framework, and now Microsoft owns Xamarin and released .net core for mac, linux and windows.

It's all about targeting DEVELOPERS. Microsoft will chase users on whatever platform they have, which is why they've also released Edge for IOS and Android, and have their own Android Launcher for phones and tablets called Microsoft Launcher and it's actually very well built.",2018-06-22 02:46:24
565,"I don't know why this was down voted.
[Miguel de Icaza on Xamarin w/Linux](https://www.reddit.com/r/programmerchat/comments/4dxpcp/i_am_miguel_de_icaza_i_started_xamarin_mono_gnome/d1vdfwz/). Perhaps it wasn't Microsoft but something surely changed his mind.",2018-06-22 05:20:21
566,"You can develop for android via Xamarin. I don't know what you mean by ""from scratch"".",2018-06-22 05:42:39
567,"Oohh I cannot make it run, without learning Xamarin.",2018-06-22 06:16:33
568,"With Xamarin you code in C# and you can use Forms similar to Windows Forms and WPF. Just lool around at their webpage, they have good beginner tutorials.",2018-06-22 07:05:49
569,"Agree. Very impressed with Xamarin, very competent, very able.",2018-06-22 08:58:10
570,"I'm indeed working on the improvements, thanks for the feedback!

If you have more concrete improvement requests, let me know :)

*You can see the changelog here:*

[https://itunes.apple.com/nl/app/domoticz-home-automation/id1251318855?platform=iphone&preserveScrollPosition=true&platform=iphone#platform/iphone&platform=iphone](https://itunes.apple.com/nl/app/domoticz-home-automation/id1251318855?platform=iphone&preserveScrollPosition=true&platform=iphone#platform/iphone&platform=iphone)

Latest changed in the app store (for public):

### Versiegeschiedenis 1.20- 29 mei 2018   

\- New permium feature >  Passcode, Touch ID and Face ID support  
\- Changed the selector switch (needed for latest beta of domoticz)  
\- Changed the layout of the rows in the main page  
\- Reworked the settings page  
\- Various fixes on crash reports  
\- Updated libraries (Xamarin version)    ",2018-06-22 14:20:41
571,">  Except for Xamarin i was always bitten by things that do not work properly or that are unsettling difficult to achieve.

why did you not continue with Xamarin?",2018-06-22 14:36:21
572,No. When Windows patches start to drop in and you decide you want to test Xamarin.Forms then you need more. I did. 256 GB is the way to go. Remember VS can't install on other drives than C.,2018-06-22 15:58:40
573,"When you say ""doesn't recognize"", what do you mean? You see the red squiggly line in the editor, or you're getting an error when you compile? Are you building an Android, iOS or UWP app?

It would be helpful if you could paste the exact error message.

That said, Xamarin is quirky and idiosyncratic. Sometimes I will get errors where InitializeComponent() is not found. At those times, I close visual studio, delete the .vs directory in the project directly, and the obj and bin directories. Then I reload the project and rebuild.",2018-06-22 23:31:18
574,"Yes, these are just the sort of things that make Xamarin so much *fun* ;-)

Yes, I would exit VS, nuke the .vs, bin and obj files, then restart. You may have to exit and restart after building.",2018-06-22 23:43:49
575,"Microsoft is the best thing about .NET.

.NET makes amazing progress and Microsoft invests heavily in the ecosystem. C#, across the various runtimes, is one of the best supported programming languages there is. Desktop apps, mobile apps, web apps, games, pretty much everything.

Much of this is possible due to Xamarin, who made Mono, and are now a Microsoft subsidiary.
",2018-06-22 23:48:57
576,"I'm not familiar with Xamarin, but it sounds like the color type has an implicit [conversion operator](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/conversion-operators) to `int`.",2018-06-23 00:02:48
577,"According to [the docs](https://developer.xamarin.com/api/type/Android.Graphics.Color/), you're right.  I would link directly to the implicit conversion operator's docs for it, but it 404ed on me when I clicked on it.

It makes sense, too... Android.Graphics.Color is just a struct representing an ARGB color that has methods to get the alpha, red, green, and blue colors independently instead of having to do bit shifting.",2018-06-23 01:12:19
578,"hey bobdole, we would love some help with app development if you're interested. 

Even if it's just a web browser wrapper that goes to saidit, that'd be awesome. I tried to give it a go myself using xamarin and have had tons of difficulties. We'd love for someone to help out in this area!

You can PM me and we can talk details. ",2018-06-23 01:52:19
579,"Lmfao I specifically was taught how to use xamarin in one of my last classes before graduating in may, XD. While not amazing at getting iOS to function perfectly, I have built multiple small apps that worked in android just fine. Only issue with xamarin (least last I used it end of last year) is that you gotta use sqlLight for a DB and its kinda really crap; least Amazon services work pretty good with the app. Hit me up with details and maybe we can start something. Been wanting to program some stuff since graduating...",2018-06-23 02:05:13
580,"If its just Win 10 / VS17 then yes.

I run a 120GB with both installed with the full shebang including Xamarin, and a bit of other junk, as long as you keep your projects on a different drive your fine for space 20-30gb left over.",2018-06-23 09:22:39
581,">	That said, Xamarin is quirky and idiosyncratic. 

This is an understatement lol. I always get the warning ambiguity between whateverpage.InitializeComponent() and whateverpage.InitializeComponent(). Never looked into what it is though. 

Or that randomly your app just doesnt build. Like, you click on build, it starts building and then just stops for no reason. A restart always fixes that though. ",2018-06-23 09:43:59
582,Unless you are using Xamarin you can't use C# on Android,2018-06-23 11:09:01
583,"You already instantiated your View Controller with var MyViewController = new UIViewController() {...}, but you only instantiated a default View Controller (UIViewController), not a custom one that you've created that might have other properties you could set, so the properties you can set are limited to what's included in a default UIViewController (Title, View.BackgroundColor, etc.).

Read through this to get a better idea of how to create a custom View Controller, with custom properties.

https://docs.microsoft.com/en-us/xamarin/ios/user-interface/ios-ui/creating-ui-objects?tabs=vsmac",2018-06-23 14:57:00
584,See my reply: https://www.reddit.com/r/Xamarin/comments/8stur8/uiviewcontrollers/e15xirx/?st=jirj6bfu&sh=373eb5a2,2018-06-23 15:00:14
585,">fear of change  
Something like that. To be precise it is fear of bad sudden change and what it would be mean for future C# code that  we have to deal with.   
Interfaces were introduced as contracts and I think it was a clean design choice and usage as opposed to the java one where they were used to solve many issues in a messy hacky way (functional interfaces,  avoiding concrete types in the standard lib e.g collections like List<T> and acting as a hardcoded extension method-like behaviour).    
I use interfaces as contracts and expect them to be used as such in 3rd party libs. Making them have implementation after so many years IMO adds complexity to the language for newcomers (inteface vs abstract class. hint: state) and is pure confusion(not lack of understanding) for veteran users. Of course, we will swallow it easily and possibly use it. I think a good design pattern for this would be that  ""trait"" interfaces only be used as such (all members have default implementation). IMO it is especially useful for Xamarin and some .NET internals but not for your everyday C# dev.   
There are many issues that deserve more attention such as typeclasses and pattern matching. IMO typeclasses and the way interfaces are headed would be a perfect mixture. Typeclasses would be the new (and better) way to make a contract because it can handle everything an interface can AND static members and possibly operators and one would use a trait interface to avoid explicit re-implementation boilerplate  on both api designer and consumer sides. Of course, we also have mixins(extension methods) in the bag which can extend anything. Having first class support for mixins (extension everything) would also be pretty awesome and the end result would be the usual clean consistent design plus features that empower C# devs.   
`TL;DR`  having interfaces with implementation doesn't mean anything for your code base but it introduces new capabilities that a small portion of C# devs may benefit from. But honestly this wasn't an issue for most of C# devs who were expecting some new features (that were delayed because of this) rather than redefining such a fundamental type that was accepted and loved as is.",2018-06-23 16:16:45
586,"Have you noticed that none of the beneficial openness is coming from the Windows or Office teams? Those teams themselves are the size of entire companies: it should be entirely unsurprising if there are varying cultures depending on where you are at Microsoft.

So, it should be equally unsurprising that the Office team is making ""crucial proprietary moats"".

Why didn't they do it twenty years ago? Twenty years ago, Steve Ballmer was the CEO and the anti-open source culture was everywhere at Microsoft.

Why are Roslyn (.NET compiler infrastructure), Visual Studio Code, TypeScript, Xamarin Forms, the core of the Edge JavaScript engine, and .NET Core open-source?

Why does PowerShell v6 lack substantial management capabilities for Windows, while being the official way forward for PowerShell? The PowerShell team wouldn't do that if open development wasn't the priority.",2018-06-23 18:10:15
587,"> Why are Roslyn (.NET compiler infrastructure), Visual Studio Code, TypeScript, Xamarin Forms, the core of the Edge JavaScript engine, and .NET Core open-source?

Strategy, which Microsoft is very skilled at. Like that time they tried to adopt Java, but only their own implementation of Java. They liked the idea so much they cleaned up a few of the early, rushed design decisions and issued it as CLI/CLR/C#.

The only questions are how long-term the strategy is intended to be. Many Microsoft product lines have switched from actively hunting marketshare to a monetization strategy.

There are reasons why Microsoft doesn't support NFS client for their Hyper-V hypervisor even though all their competitors do. There are reasons why Microsoft's implementation of ODF file formats is weak, and why they don't even follow their own voluminous documentation for OOXML. Microsoft's mail client doesn't support industry-standard CalDAV and CardDAV because that wouldn't push adoption of Microsoft's money-making mail server products.
",2018-06-23 18:20:35
588,"Xamarin developer here, but not on the Forms team. *ducks a tomato*

I understand the frustration everyone is experiencing, and that venting about broken tooling can be helpful.

Please though, consider filing issues at https://github.com/xamarin/Xamarin.Forms/issues with build logs. We can't fix issues that aren't reported.",2018-06-26 13:58:30
589,"Not true, post Satya everything they do seems to be gold

* VSCode
* Typescript
* AI work
* Azure (Satya's baby)
* LinkedIN post MS acquisition has become even better  
* Xamarin

I don't know if it is because of Satya or plain good luck but they seem to be doing good now.",2018-06-26 14:19:12
590,Ive been using Xamarin native with MvvmCross for a few years now and its been very stable since the first 6 months or so after Visual Studio 2017 was released. MvvmCross doesnt have too much of a learning curve if youre already familiar with Mvvm. If you check it out then get the MvxSxaffolding Visual Studio plug-in to help create your Visual Studio solution.,2018-06-26 15:37:07
591,"Xamarin Native has been extremely solid for me in the past year. Even the mac provisioning profile stuff that wasn't your issue has improved. Nice job!

I feel bad for the forms team, I hear nothing but problems.",2018-06-26 15:39:31
592,"It shouldn't be broken like that. I just tried a new forms project and everything is working somewhat fine. I found 12 errors that were easy to fix (Recompile fixed all errors except an odd embedded resource issue) and it was read to go. For iOS compiling you need to do some crazy provisioning profile stuff but that's not really a Xamarin thing.

If you tried finding your solution online and haven't found a fix, contact their support team. They are friendly and helpful.",2018-06-26 16:05:23
593,"I saw some of my friends getting similar problems, usually related to the old hardware (still powerful but just older than 3 years, let's say), conflicts between Android SDK installed in more than one place, or artifacts of Windows 7 to 10 migration. The most annoying was the problem with new Hyper-V emulator promising better performance but due to hardware incompatibilities resulting in completely unusable environments.

I switched this year to MacOS due to similar problems and headaches related to emulator performance and build times on Windows. I sometimes use Visual Studio 2017 Preview on Windows 10 just to get better IDE experience, because Visual Studio for Mac is still inferior even to Visual Studio Code, not mentioning Rider or the original Visual Studio.

Unfortunately, even though Xamarin experience on Mac is relatively good, it's far inferior to the experience of Flutter development (hot reload, Visual Studio Code extension etc.). There are some solutions like Mfractor, Gorilla Player or Xamarin Live Player that try to make it easier and more pleasant but usually are limited to vanilla XF.

I can confirm that most of the time removing `/bin` and `/obj` folders followed by `/packages` deletion solves the problem. There is a [dedicated extension for this](https://github.com/yuv4ik/vsmacdeepclean), which says a lot about how common it is. Sometimes it's necessary to check build options (e.g. some architectures might be not supported), so I recommend using ready-made templates like Prism or [MvxScaffolding](https://github.com/Plac3hold3r/MvxScaffolding).

I used to have evenings when I was spending hours on solving stupid problems with incompatible nuget packages and XAML compilation errors. Fortunately, now if something like this occurs, there's a clear information in build log stating what package depends on what other package that causes conflict. When it comes to XAML errors the simplest solution is just to comment out some of the  XAML code to check whether it causes problem. Usually it's my fault that something crashes.",2018-06-26 18:17:18
594,"Xamarin.Essentials

Avacache or Monkey Cache

[MvvmHelpers](https://github.com/jamesmontemagno/mvvm-helpers)

Xamarin.Forms-PullToRefreshLayout


Prism or MvvmCross",2018-06-26 18:28:23
595,"Removed: Rule 4.

There are a few C#-based methods of doing this. Try searching for something like ""Xamarin image circle"" and you'll get a few hits. (for example: https://github.com/jamesmontemagno/ImageCirclePlugin) Dive in and give it a shot. If you run into specific issues, feel free to post and include your code and errors that you get.",2018-06-26 18:28:45
